
CAN_Loopback_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a18  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08003be8  08003be8  00013be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ce8  08003ce8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003ce8  08003ce8  00013ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cf0  08003cf0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cf0  08003cf0  00013cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cf4  08003cf4  00013cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003cf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  20000070  08003d68  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08003d68  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bcd9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a5b  00000000  00000000  0002bd79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000858  00000000  00000000  0002d7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007c0  00000000  00000000  0002e030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021718  00000000  00000000  0002e7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a42a  00000000  00000000  0004ff08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb324  00000000  00000000  0005a332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00125656  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002560  00000000  00000000  001256ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003bd0 	.word	0x08003bd0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08003bd0 	.word	0x08003bd0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005bc:	f000 fc7e 	bl	8000ebc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c0:	f000 f82c 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c4:	f000 f924 	bl	8000810 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005c8:	f000 f8ce 	bl	8000768 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80005cc:	f000 f894 	bl	80006f8 <MX_CAN1_Init>
  MX_USART6_UART_Init();
 80005d0:	f000 f8f4 	bl	80007bc <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  // Filter configuration
  CAN1_filterConfig();
 80005d4:	f000 f9b8 	bl	8000948 <CAN1_filterConfig>

  // Enable interrupts.
  if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF))
 80005d8:	f240 4103 	movw	r1, #1027	; 0x403
 80005dc:	480d      	ldr	r0, [pc, #52]	; (8000614 <main+0x5c>)
 80005de:	f001 f910 	bl	8001802 <HAL_CAN_ActivateNotification>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <main+0x34>
  {
	  Error_Handler();
 80005e8:	f000 fa90 	bl	8000b0c <Error_Handler>
  }

  // This API move can from initialization mode to normal mode.
  if(HAL_CAN_Start(&hcan1))
 80005ec:	4809      	ldr	r0, [pc, #36]	; (8000614 <main+0x5c>)
 80005ee:	f000 fed7 	bl	80013a0 <HAL_CAN_Start>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <main+0x44>
  {
	  Error_Handler();
 80005f8:	f000 fa88 	bl	8000b0c <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  CAN1_TX();
 80005fc:	f000 f976 	bl	80008ec <CAN1_TX>
	  HAL_Delay(500);
 8000600:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000604:	f000 fccc 	bl	8000fa0 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000608:	2120      	movs	r1, #32
 800060a:	4803      	ldr	r0, [pc, #12]	; (8000618 <main+0x60>)
 800060c:	f001 fde5 	bl	80021da <HAL_GPIO_TogglePin>
	  CAN1_TX();
 8000610:	e7f4      	b.n	80005fc <main+0x44>
 8000612:	bf00      	nop
 8000614:	20000160 	.word	0x20000160
 8000618:	40020000 	.word	0x40020000

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 031c 	add.w	r3, r7, #28
 8000626:	2234      	movs	r2, #52	; 0x34
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f002 fe9a 	bl	8003364 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 0308 	add.w	r3, r7, #8
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	4b2a      	ldr	r3, [pc, #168]	; (80006f0 <SystemClock_Config+0xd4>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a29      	ldr	r2, [pc, #164]	; (80006f0 <SystemClock_Config+0xd4>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b27      	ldr	r3, [pc, #156]	; (80006f0 <SystemClock_Config+0xd4>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800065c:	2300      	movs	r3, #0
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	4b24      	ldr	r3, [pc, #144]	; (80006f4 <SystemClock_Config+0xd8>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000668:	4a22      	ldr	r2, [pc, #136]	; (80006f4 <SystemClock_Config+0xd8>)
 800066a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	4b20      	ldr	r3, [pc, #128]	; (80006f4 <SystemClock_Config+0xd8>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000678:	603b      	str	r3, [r7, #0]
 800067a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800067c:	2301      	movs	r3, #1
 800067e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000680:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000684:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000686:	2302      	movs	r3, #2
 8000688:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800068e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000690:	2304      	movs	r3, #4
 8000692:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000694:	2364      	movs	r3, #100	; 0x64
 8000696:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000698:	2302      	movs	r3, #2
 800069a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800069c:	2302      	movs	r3, #2
 800069e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a4:	f107 031c 	add.w	r3, r7, #28
 80006a8:	4618      	mov	r0, r3
 80006aa:	f002 f87d 	bl	80027a8 <HAL_RCC_OscConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006b4:	f000 fa2a 	bl	8000b0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b8:	230f      	movs	r3, #15
 80006ba:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006bc:	2302      	movs	r3, #2
 80006be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ce:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	2103      	movs	r1, #3
 80006d6:	4618      	mov	r0, r3
 80006d8:	f001 fd9a 	bl	8002210 <HAL_RCC_ClockConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006e2:	f000 fa13 	bl	8000b0c <Error_Handler>
  }
}
 80006e6:	bf00      	nop
 80006e8:	3750      	adds	r7, #80	; 0x50
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40007000 	.word	0x40007000

080006f8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006fc:	4b18      	ldr	r3, [pc, #96]	; (8000760 <MX_CAN1_Init+0x68>)
 80006fe:	4a19      	ldr	r2, [pc, #100]	; (8000764 <MX_CAN1_Init+0x6c>)
 8000700:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 8000702:	4b17      	ldr	r3, [pc, #92]	; (8000760 <MX_CAN1_Init+0x68>)
 8000704:	220a      	movs	r2, #10
 8000706:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 8000708:	4b15      	ldr	r3, [pc, #84]	; (8000760 <MX_CAN1_Init+0x68>)
 800070a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800070e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000710:	4b13      	ldr	r3, [pc, #76]	; (8000760 <MX_CAN1_Init+0x68>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000716:	4b12      	ldr	r3, [pc, #72]	; (8000760 <MX_CAN1_Init+0x68>)
 8000718:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800071c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <MX_CAN1_Init+0x68>)
 8000720:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000724:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_CAN1_Init+0x68>)
 8000728:	2200      	movs	r2, #0
 800072a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_CAN1_Init+0x68>)
 800072e:	2200      	movs	r2, #0
 8000730:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <MX_CAN1_Init+0x68>)
 8000734:	2200      	movs	r2, #0
 8000736:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_CAN1_Init+0x68>)
 800073a:	2201      	movs	r2, #1
 800073c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <MX_CAN1_Init+0x68>)
 8000740:	2200      	movs	r2, #0
 8000742:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_CAN1_Init+0x68>)
 8000746:	2200      	movs	r2, #0
 8000748:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_CAN1_Init+0x68>)
 800074c:	f000 fc4c 	bl	8000fe8 <HAL_CAN_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000756:	f000 f9d9 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000160 	.word	0x20000160
 8000764:	40006400 	.word	0x40006400

08000768 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800076e:	4a12      	ldr	r2, [pc, #72]	; (80007b8 <MX_USART2_UART_Init+0x50>)
 8000770:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000774:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000778:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800078c:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 80007a0:	f002 faa0 	bl	8002ce4 <HAL_UART_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007aa:	f000 f9af 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	2000011c 	.word	0x2000011c
 80007b8:	40004400 	.word	0x40004400

080007bc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_USART6_UART_Init+0x4c>)
 80007c2:	4a12      	ldr	r2, [pc, #72]	; (800080c <MX_USART6_UART_Init+0x50>)
 80007c4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <MX_USART6_UART_Init+0x4c>)
 80007c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007cc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_USART6_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_USART6_UART_Init+0x4c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_USART6_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_USART6_UART_Init+0x4c>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_USART6_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_USART6_UART_Init+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_USART6_UART_Init+0x4c>)
 80007f4:	f002 fa76 	bl	8002ce4 <HAL_UART_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80007fe:	f000 f985 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200000d8 	.word	0x200000d8
 800080c:	40011400 	.word	0x40011400

08000810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	; 0x28
 8000814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	4b2d      	ldr	r3, [pc, #180]	; (80008e0 <MX_GPIO_Init+0xd0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a2c      	ldr	r2, [pc, #176]	; (80008e0 <MX_GPIO_Init+0xd0>)
 8000830:	f043 0304 	orr.w	r3, r3, #4
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b2a      	ldr	r3, [pc, #168]	; (80008e0 <MX_GPIO_Init+0xd0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0304 	and.w	r3, r3, #4
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	4b26      	ldr	r3, [pc, #152]	; (80008e0 <MX_GPIO_Init+0xd0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a25      	ldr	r2, [pc, #148]	; (80008e0 <MX_GPIO_Init+0xd0>)
 800084c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b23      	ldr	r3, [pc, #140]	; (80008e0 <MX_GPIO_Init+0xd0>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	4b1f      	ldr	r3, [pc, #124]	; (80008e0 <MX_GPIO_Init+0xd0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a1e      	ldr	r2, [pc, #120]	; (80008e0 <MX_GPIO_Init+0xd0>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <MX_GPIO_Init+0xd0>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <MX_GPIO_Init+0xd0>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a17      	ldr	r2, [pc, #92]	; (80008e0 <MX_GPIO_Init+0xd0>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <MX_GPIO_Init+0xd0>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	2120      	movs	r1, #32
 800089a:	4812      	ldr	r0, [pc, #72]	; (80008e4 <MX_GPIO_Init+0xd4>)
 800089c:	f001 fc84 	bl	80021a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008a6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4619      	mov	r1, r3
 80008b6:	480c      	ldr	r0, [pc, #48]	; (80008e8 <MX_GPIO_Init+0xd8>)
 80008b8:	f001 fae2 	bl	8001e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008bc:	2320      	movs	r3, #32
 80008be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c0:	2301      	movs	r3, #1
 80008c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	4619      	mov	r1, r3
 80008d2:	4804      	ldr	r0, [pc, #16]	; (80008e4 <MX_GPIO_Init+0xd4>)
 80008d4:	f001 fad4 	bl	8001e80 <HAL_GPIO_Init>

}
 80008d8:	bf00      	nop
 80008da:	3728      	adds	r7, #40	; 0x28
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40020000 	.word	0x40020000
 80008e8:	40020800 	.word	0x40020800

080008ec <CAN1_TX>:

/* USER CODE BEGIN 4 */
void CAN1_TX(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
	uint8_t msg[5] = {'H','e','l','l','o'};
 80008f2:	4a12      	ldr	r2, [pc, #72]	; (800093c <CAN1_TX+0x50>)
 80008f4:	f107 0308 	add.w	r3, r7, #8
 80008f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008fc:	6018      	str	r0, [r3, #0]
 80008fe:	3304      	adds	r3, #4
 8000900:	7019      	strb	r1, [r3, #0]

	// Mailbox
	uint32_t TXMailbox;

	// Init the header structure.
	CANTXHeader.DLC = 5;
 8000902:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <CAN1_TX+0x54>)
 8000904:	2205      	movs	r2, #5
 8000906:	611a      	str	r2, [r3, #16]
	CANTXHeader.StdId = 0x65D;
 8000908:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <CAN1_TX+0x54>)
 800090a:	f240 625d 	movw	r2, #1629	; 0x65d
 800090e:	601a      	str	r2, [r3, #0]
	CANTXHeader.IDE = CAN_ID_STD;
 8000910:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <CAN1_TX+0x54>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
	CANTXHeader.RTR = CAN_RTR_DATA;
 8000916:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <CAN1_TX+0x54>)
 8000918:	2200      	movs	r2, #0
 800091a:	60da      	str	r2, [r3, #12]

	// Add message to the mailbox.
	if(HAL_CAN_AddTxMessage(&hcan1, &CANTXHeader, msg, &TXMailbox))
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	f107 0208 	add.w	r2, r7, #8
 8000922:	4907      	ldr	r1, [pc, #28]	; (8000940 <CAN1_TX+0x54>)
 8000924:	4807      	ldr	r0, [pc, #28]	; (8000944 <CAN1_TX+0x58>)
 8000926:	f000 fd7f 	bl	8001428 <HAL_CAN_AddTxMessage>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <CAN1_TX+0x48>
	{
		Error_Handler();
 8000930:	f000 f8ec 	bl	8000b0c <Error_Handler>
	}

}
 8000934:	bf00      	nop
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	08003be8 	.word	0x08003be8
 8000940:	20000098 	.word	0x20000098
 8000944:	20000160 	.word	0x20000160

08000948 <CAN1_filterConfig>:
	sprintf(msgToTerminal, "CAN message received: %s\r\n", RXBuffer);
	HAL_UART_Transmit(&huart2, (uint8_t*)msgToTerminal, strlen(msgToTerminal), 2000);
}

void CAN1_filterConfig(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
	CANFilterInit.FilterActivation = ENABLE;
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <CAN1_filterConfig+0x58>)
 800094e:	2201      	movs	r2, #1
 8000950:	621a      	str	r2, [r3, #32]
	CANFilterInit.FilterBank = 0;
 8000952:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <CAN1_filterConfig+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	615a      	str	r2, [r3, #20]
	CANFilterInit.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000958:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <CAN1_filterConfig+0x58>)
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
	CANFilterInit.FilterIdHigh = 0;
 800095e:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <CAN1_filterConfig+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
	CANFilterInit.FilterIdLow = 0;
 8000964:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <CAN1_filterConfig+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	605a      	str	r2, [r3, #4]
	CANFilterInit.FilterMaskIdHigh = 0;
 800096a:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <CAN1_filterConfig+0x58>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
	CANFilterInit.FilterMaskIdLow = 0;
 8000970:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <CAN1_filterConfig+0x58>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
	CANFilterInit.FilterMode = CAN_FILTERMODE_IDMASK;
 8000976:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <CAN1_filterConfig+0x58>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
	CANFilterInit.FilterScale = CAN_FILTERSCALE_32BIT;
 800097c:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <CAN1_filterConfig+0x58>)
 800097e:	2201      	movs	r2, #1
 8000980:	61da      	str	r2, [r3, #28]
	CANFilterInit.SlaveStartFilterBank = 14;
 8000982:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <CAN1_filterConfig+0x58>)
 8000984:	220e      	movs	r2, #14
 8000986:	625a      	str	r2, [r3, #36]	; 0x24

	if(HAL_CAN_ConfigFilter(&hcan1, &CANFilterInit))
 8000988:	4905      	ldr	r1, [pc, #20]	; (80009a0 <CAN1_filterConfig+0x58>)
 800098a:	4806      	ldr	r0, [pc, #24]	; (80009a4 <CAN1_filterConfig+0x5c>)
 800098c:	f000 fc28 	bl	80011e0 <HAL_CAN_ConfigFilter>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <CAN1_filterConfig+0x52>
	{
		Error_Handler();
 8000996:	f000 f8b9 	bl	8000b0c <Error_Handler>
	}
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	200000b0 	.word	0x200000b0
 80009a4:	20000160 	.word	0x20000160

080009a8 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b09c      	sub	sp, #112	; 0x70
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
  char msgToTerminal[100];

  sprintf(msgToTerminal, "Message transmitted from mailbox 0 \r\n");
 80009b0:	f107 030c 	add.w	r3, r7, #12
 80009b4:	490a      	ldr	r1, [pc, #40]	; (80009e0 <HAL_CAN_TxMailbox0CompleteCallback+0x38>)
 80009b6:	4618      	mov	r0, r3
 80009b8:	f002 fcdc 	bl	8003374 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)msgToTerminal, strlen(msgToTerminal), 2000);
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff fc25 	bl	8000210 <strlen>
 80009c6:	4603      	mov	r3, r0
 80009c8:	b29a      	uxth	r2, r3
 80009ca:	f107 010c 	add.w	r1, r7, #12
 80009ce:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80009d2:	4804      	ldr	r0, [pc, #16]	; (80009e4 <HAL_CAN_TxMailbox0CompleteCallback+0x3c>)
 80009d4:	f002 f9d3 	bl	8002d7e <HAL_UART_Transmit>

}
 80009d8:	bf00      	nop
 80009da:	3770      	adds	r7, #112	; 0x70
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	08003c0c 	.word	0x08003c0c
 80009e4:	2000011c 	.word	0x2000011c

080009e8 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b09c      	sub	sp, #112	; 0x70
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
  char msgToTerminal[100];

  sprintf(msgToTerminal, "Message transmitted from mailbox 1 \r\n");
 80009f0:	f107 030c 	add.w	r3, r7, #12
 80009f4:	490a      	ldr	r1, [pc, #40]	; (8000a20 <HAL_CAN_TxMailbox1CompleteCallback+0x38>)
 80009f6:	4618      	mov	r0, r3
 80009f8:	f002 fcbc 	bl	8003374 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)msgToTerminal, strlen(msgToTerminal), 2000);
 80009fc:	f107 030c 	add.w	r3, r7, #12
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff fc05 	bl	8000210 <strlen>
 8000a06:	4603      	mov	r3, r0
 8000a08:	b29a      	uxth	r2, r3
 8000a0a:	f107 010c 	add.w	r1, r7, #12
 8000a0e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a12:	4804      	ldr	r0, [pc, #16]	; (8000a24 <HAL_CAN_TxMailbox1CompleteCallback+0x3c>)
 8000a14:	f002 f9b3 	bl	8002d7e <HAL_UART_Transmit>

}
 8000a18:	bf00      	nop
 8000a1a:	3770      	adds	r7, #112	; 0x70
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	08003c34 	.word	0x08003c34
 8000a24:	2000011c 	.word	0x2000011c

08000a28 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b09c      	sub	sp, #112	; 0x70
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
  char msgToTerminal[100];

  sprintf(msgToTerminal, "Message transmitted from mailbox 2 \r\n");
 8000a30:	f107 030c 	add.w	r3, r7, #12
 8000a34:	490a      	ldr	r1, [pc, #40]	; (8000a60 <HAL_CAN_TxMailbox2CompleteCallback+0x38>)
 8000a36:	4618      	mov	r0, r3
 8000a38:	f002 fc9c 	bl	8003374 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)msgToTerminal, strlen(msgToTerminal), 2000);
 8000a3c:	f107 030c 	add.w	r3, r7, #12
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff fbe5 	bl	8000210 <strlen>
 8000a46:	4603      	mov	r3, r0
 8000a48:	b29a      	uxth	r2, r3
 8000a4a:	f107 010c 	add.w	r1, r7, #12
 8000a4e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a52:	4804      	ldr	r0, [pc, #16]	; (8000a64 <HAL_CAN_TxMailbox2CompleteCallback+0x3c>)
 8000a54:	f002 f993 	bl	8002d7e <HAL_UART_Transmit>

}
 8000a58:	bf00      	nop
 8000a5a:	3770      	adds	r7, #112	; 0x70
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	08003c5c 	.word	0x08003c5c
 8000a64:	2000011c 	.word	0x2000011c

08000a68 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b09e      	sub	sp, #120	; 0x78
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
            user file
   */
  uint8_t RXBuffer[10];
  	char msgToTerminal[100];

  	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &CANRXHeader, RXBuffer))
 8000a70:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a74:	4a11      	ldr	r2, [pc, #68]	; (8000abc <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8000a76:	2100      	movs	r1, #0
 8000a78:	4811      	ldr	r0, [pc, #68]	; (8000ac0 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8000a7a:	f000 fdb0 	bl	80015de <HAL_CAN_GetRxMessage>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
  	{
  		Error_Handler();
 8000a84:	f000 f842 	bl	8000b0c <Error_Handler>
  	}

  	// Print msg to terminal to know successful transmission.
  	sprintf(msgToTerminal, "CAN message received: %s\r\n", RXBuffer);
 8000a88:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8000a8c:	f107 0308 	add.w	r3, r7, #8
 8000a90:	490c      	ldr	r1, [pc, #48]	; (8000ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8000a92:	4618      	mov	r0, r3
 8000a94:	f002 fc6e 	bl	8003374 <siprintf>
  	HAL_UART_Transmit(&huart2, (uint8_t*)msgToTerminal, strlen(msgToTerminal), 2000);
 8000a98:	f107 0308 	add.w	r3, r7, #8
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fbb7 	bl	8000210 <strlen>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	f107 0108 	add.w	r1, r7, #8
 8000aaa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000aae:	4806      	ldr	r0, [pc, #24]	; (8000ac8 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000ab0:	f002 f965 	bl	8002d7e <HAL_UART_Transmit>
}
 8000ab4:	bf00      	nop
 8000ab6:	3778      	adds	r7, #120	; 0x78
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000188 	.word	0x20000188
 8000ac0:	20000160 	.word	0x20000160
 8000ac4:	08003bf0 	.word	0x08003bf0
 8000ac8:	2000011c 	.word	0x2000011c

08000acc <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b090      	sub	sp, #64	; 0x40
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
  char msgToTerminal[50];

  sprintf(msgToTerminal, "CAN error detected.\r\n");
 8000ad4:	f107 030c 	add.w	r3, r7, #12
 8000ad8:	490a      	ldr	r1, [pc, #40]	; (8000b04 <HAL_CAN_ErrorCallback+0x38>)
 8000ada:	4618      	mov	r0, r3
 8000adc:	f002 fc4a 	bl	8003374 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)msgToTerminal, strlen(msgToTerminal), 2000);
 8000ae0:	f107 030c 	add.w	r3, r7, #12
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff fb93 	bl	8000210 <strlen>
 8000aea:	4603      	mov	r3, r0
 8000aec:	b29a      	uxth	r2, r3
 8000aee:	f107 010c 	add.w	r1, r7, #12
 8000af2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000af6:	4804      	ldr	r0, [pc, #16]	; (8000b08 <HAL_CAN_ErrorCallback+0x3c>)
 8000af8:	f002 f941 	bl	8002d7e <HAL_UART_Transmit>
}
 8000afc:	bf00      	nop
 8000afe:	3740      	adds	r7, #64	; 0x40
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	08003c84 	.word	0x08003c84
 8000b08:	2000011c 	.word	0x2000011c

08000b0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b10:	b672      	cpsid	i
}
 8000b12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <Error_Handler+0x8>
	...

08000b18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <HAL_MspInit+0x4c>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	4a0f      	ldr	r2, [pc, #60]	; (8000b64 <HAL_MspInit+0x4c>)
 8000b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b2e:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <HAL_MspInit+0x4c>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	603b      	str	r3, [r7, #0]
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <HAL_MspInit+0x4c>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	4a08      	ldr	r2, [pc, #32]	; (8000b64 <HAL_MspInit+0x4c>)
 8000b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b48:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_MspInit+0x4c>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b52:	603b      	str	r3, [r7, #0]
 8000b54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	40023800 	.word	0x40023800

08000b68 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	; 0x28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a29      	ldr	r2, [pc, #164]	; (8000c2c <HAL_CAN_MspInit+0xc4>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d14c      	bne.n	8000c24 <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]
 8000b8e:	4b28      	ldr	r3, [pc, #160]	; (8000c30 <HAL_CAN_MspInit+0xc8>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b92:	4a27      	ldr	r2, [pc, #156]	; (8000c30 <HAL_CAN_MspInit+0xc8>)
 8000b94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b98:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9a:	4b25      	ldr	r3, [pc, #148]	; (8000c30 <HAL_CAN_MspInit+0xc8>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	4b21      	ldr	r3, [pc, #132]	; (8000c30 <HAL_CAN_MspInit+0xc8>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a20      	ldr	r2, [pc, #128]	; (8000c30 <HAL_CAN_MspInit+0xc8>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b1e      	ldr	r3, [pc, #120]	; (8000c30 <HAL_CAN_MspInit+0xc8>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000bc2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000bd4:	2309      	movs	r3, #9
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4815      	ldr	r0, [pc, #84]	; (8000c34 <HAL_CAN_MspInit+0xcc>)
 8000be0:	f001 f94e 	bl	8001e80 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 15, 0);
 8000be4:	2200      	movs	r2, #0
 8000be6:	210f      	movs	r1, #15
 8000be8:	2013      	movs	r0, #19
 8000bea:	f001 f912 	bl	8001e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000bee:	2013      	movs	r0, #19
 8000bf0:	f001 f92b 	bl	8001e4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 15, 0);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	210f      	movs	r1, #15
 8000bf8:	2014      	movs	r0, #20
 8000bfa:	f001 f90a 	bl	8001e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000bfe:	2014      	movs	r0, #20
 8000c00:	f001 f923 	bl	8001e4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 15, 0);
 8000c04:	2200      	movs	r2, #0
 8000c06:	210f      	movs	r1, #15
 8000c08:	2015      	movs	r0, #21
 8000c0a:	f001 f902 	bl	8001e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000c0e:	2015      	movs	r0, #21
 8000c10:	f001 f91b 	bl	8001e4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 15, 0);
 8000c14:	2200      	movs	r2, #0
 8000c16:	210f      	movs	r1, #15
 8000c18:	2016      	movs	r0, #22
 8000c1a:	f001 f8fa 	bl	8001e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000c1e:	2016      	movs	r0, #22
 8000c20:	f001 f913 	bl	8001e4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000c24:	bf00      	nop
 8000c26:	3728      	adds	r7, #40	; 0x28
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40006400 	.word	0x40006400
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40020000 	.word	0x40020000

08000c38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08c      	sub	sp, #48	; 0x30
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 031c 	add.w	r3, r7, #28
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a32      	ldr	r2, [pc, #200]	; (8000d20 <HAL_UART_MspInit+0xe8>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d12c      	bne.n	8000cb4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61bb      	str	r3, [r7, #24]
 8000c5e:	4b31      	ldr	r3, [pc, #196]	; (8000d24 <HAL_UART_MspInit+0xec>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c62:	4a30      	ldr	r2, [pc, #192]	; (8000d24 <HAL_UART_MspInit+0xec>)
 8000c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c68:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6a:	4b2e      	ldr	r3, [pc, #184]	; (8000d24 <HAL_UART_MspInit+0xec>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c72:	61bb      	str	r3, [r7, #24]
 8000c74:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	617b      	str	r3, [r7, #20]
 8000c7a:	4b2a      	ldr	r3, [pc, #168]	; (8000d24 <HAL_UART_MspInit+0xec>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a29      	ldr	r2, [pc, #164]	; (8000d24 <HAL_UART_MspInit+0xec>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b27      	ldr	r3, [pc, #156]	; (8000d24 <HAL_UART_MspInit+0xec>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	617b      	str	r3, [r7, #20]
 8000c90:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c92:	230c      	movs	r3, #12
 8000c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c96:	2302      	movs	r3, #2
 8000c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ca2:	2307      	movs	r3, #7
 8000ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca6:	f107 031c 	add.w	r3, r7, #28
 8000caa:	4619      	mov	r1, r3
 8000cac:	481e      	ldr	r0, [pc, #120]	; (8000d28 <HAL_UART_MspInit+0xf0>)
 8000cae:	f001 f8e7 	bl	8001e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000cb2:	e030      	b.n	8000d16 <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a1c      	ldr	r2, [pc, #112]	; (8000d2c <HAL_UART_MspInit+0xf4>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d12b      	bne.n	8000d16 <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <HAL_UART_MspInit+0xec>)
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc6:	4a17      	ldr	r2, [pc, #92]	; (8000d24 <HAL_UART_MspInit+0xec>)
 8000cc8:	f043 0320 	orr.w	r3, r3, #32
 8000ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cce:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <HAL_UART_MspInit+0xec>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd2:	f003 0320 	and.w	r3, r3, #32
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <HAL_UART_MspInit+0xec>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a10      	ldr	r2, [pc, #64]	; (8000d24 <HAL_UART_MspInit+0xec>)
 8000ce4:	f043 0304 	orr.w	r3, r3, #4
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <HAL_UART_MspInit+0xec>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0304 	and.w	r3, r3, #4
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cf6:	23c0      	movs	r3, #192	; 0xc0
 8000cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d02:	2303      	movs	r3, #3
 8000d04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000d06:	2308      	movs	r3, #8
 8000d08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d0a:	f107 031c 	add.w	r3, r7, #28
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4807      	ldr	r0, [pc, #28]	; (8000d30 <HAL_UART_MspInit+0xf8>)
 8000d12:	f001 f8b5 	bl	8001e80 <HAL_GPIO_Init>
}
 8000d16:	bf00      	nop
 8000d18:	3730      	adds	r7, #48	; 0x30
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40004400 	.word	0x40004400
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40020000 	.word	0x40020000
 8000d2c:	40011400 	.word	0x40011400
 8000d30:	40020800 	.word	0x40020800

08000d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <NMI_Handler+0x4>

08000d3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <HardFault_Handler+0x4>

08000d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <MemManage_Handler+0x4>

08000d46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <BusFault_Handler+0x4>

08000d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <UsageFault_Handler+0x4>

08000d52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d80:	f000 f8ee 	bl	8000f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d8c:	4802      	ldr	r0, [pc, #8]	; (8000d98 <CAN1_TX_IRQHandler+0x10>)
 8000d8e:	f000 fd5e 	bl	800184e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000160 	.word	0x20000160

08000d9c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000da0:	4802      	ldr	r0, [pc, #8]	; (8000dac <CAN1_RX0_IRQHandler+0x10>)
 8000da2:	f000 fd54 	bl	800184e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000160 	.word	0x20000160

08000db0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000db4:	4802      	ldr	r0, [pc, #8]	; (8000dc0 <CAN1_RX1_IRQHandler+0x10>)
 8000db6:	f000 fd4a 	bl	800184e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000160 	.word	0x20000160

08000dc4 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000dc8:	4802      	ldr	r0, [pc, #8]	; (8000dd4 <CAN1_SCE_IRQHandler+0x10>)
 8000dca:	f000 fd40 	bl	800184e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000160 	.word	0x20000160

08000dd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de0:	4a14      	ldr	r2, [pc, #80]	; (8000e34 <_sbrk+0x5c>)
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <_sbrk+0x60>)
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dec:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <_sbrk+0x64>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d102      	bne.n	8000dfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <_sbrk+0x64>)
 8000df6:	4a12      	ldr	r2, [pc, #72]	; (8000e40 <_sbrk+0x68>)
 8000df8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dfa:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <_sbrk+0x64>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4413      	add	r3, r2
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d207      	bcs.n	8000e18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e08:	f002 fa82 	bl	8003310 <__errno>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	220c      	movs	r2, #12
 8000e10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e12:	f04f 33ff 	mov.w	r3, #4294967295
 8000e16:	e009      	b.n	8000e2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <_sbrk+0x64>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e1e:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <_sbrk+0x64>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4413      	add	r3, r2
 8000e26:	4a05      	ldr	r2, [pc, #20]	; (8000e3c <_sbrk+0x64>)
 8000e28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3718      	adds	r7, #24
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20020000 	.word	0x20020000
 8000e38:	00000400 	.word	0x00000400
 8000e3c:	2000008c 	.word	0x2000008c
 8000e40:	200001b8 	.word	0x200001b8

08000e44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <SystemInit+0x20>)
 8000e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e4e:	4a05      	ldr	r2, [pc, #20]	; (8000e64 <SystemInit+0x20>)
 8000e50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ea0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e6c:	480d      	ldr	r0, [pc, #52]	; (8000ea4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e6e:	490e      	ldr	r1, [pc, #56]	; (8000ea8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e70:	4a0e      	ldr	r2, [pc, #56]	; (8000eac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e74:	e002      	b.n	8000e7c <LoopCopyDataInit>

08000e76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e7a:	3304      	adds	r3, #4

08000e7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e80:	d3f9      	bcc.n	8000e76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e82:	4a0b      	ldr	r2, [pc, #44]	; (8000eb0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e84:	4c0b      	ldr	r4, [pc, #44]	; (8000eb4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e88:	e001      	b.n	8000e8e <LoopFillZerobss>

08000e8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e8c:	3204      	adds	r2, #4

08000e8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e90:	d3fb      	bcc.n	8000e8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e92:	f7ff ffd7 	bl	8000e44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e96:	f002 fa41 	bl	800331c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e9a:	f7ff fb8d 	bl	80005b8 <main>
  bx  lr    
 8000e9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ea0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ea4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000eac:	08003cf8 	.word	0x08003cf8
  ldr r2, =_sbss
 8000eb0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000eb4:	200001b8 	.word	0x200001b8

08000eb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eb8:	e7fe      	b.n	8000eb8 <ADC_IRQHandler>
	...

08000ebc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ec0:	4b0e      	ldr	r3, [pc, #56]	; (8000efc <HAL_Init+0x40>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a0d      	ldr	r2, [pc, #52]	; (8000efc <HAL_Init+0x40>)
 8000ec6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ecc:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <HAL_Init+0x40>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a0a      	ldr	r2, [pc, #40]	; (8000efc <HAL_Init+0x40>)
 8000ed2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ed6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <HAL_Init+0x40>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a07      	ldr	r2, [pc, #28]	; (8000efc <HAL_Init+0x40>)
 8000ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee4:	2003      	movs	r0, #3
 8000ee6:	f000 ff89 	bl	8001dfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eea:	2000      	movs	r0, #0
 8000eec:	f000 f808 	bl	8000f00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef0:	f7ff fe12 	bl	8000b18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40023c00 	.word	0x40023c00

08000f00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <HAL_InitTick+0x54>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <HAL_InitTick+0x58>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	4619      	mov	r1, r3
 8000f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 ffa1 	bl	8001e66 <HAL_SYSTICK_Config>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e00e      	b.n	8000f4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2b0f      	cmp	r3, #15
 8000f32:	d80a      	bhi.n	8000f4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f34:	2200      	movs	r2, #0
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295
 8000f3c:	f000 ff69 	bl	8001e12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f40:	4a06      	ldr	r2, [pc, #24]	; (8000f5c <HAL_InitTick+0x5c>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f46:	2300      	movs	r3, #0
 8000f48:	e000      	b.n	8000f4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000000 	.word	0x20000000
 8000f58:	20000008 	.word	0x20000008
 8000f5c:	20000004 	.word	0x20000004

08000f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_IncTick+0x20>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_IncTick+0x24>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	4a04      	ldr	r2, [pc, #16]	; (8000f84 <HAL_IncTick+0x24>)
 8000f72:	6013      	str	r3, [r2, #0]
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20000008 	.word	0x20000008
 8000f84:	200001a4 	.word	0x200001a4

08000f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f8c:	4b03      	ldr	r3, [pc, #12]	; (8000f9c <HAL_GetTick+0x14>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	200001a4 	.word	0x200001a4

08000fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa8:	f7ff ffee 	bl	8000f88 <HAL_GetTick>
 8000fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb8:	d005      	beq.n	8000fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fba:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <HAL_Delay+0x44>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fc6:	bf00      	nop
 8000fc8:	f7ff ffde 	bl	8000f88 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d8f7      	bhi.n	8000fc8 <HAL_Delay+0x28>
  {
  }
}
 8000fd8:	bf00      	nop
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000008 	.word	0x20000008

08000fe8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d101      	bne.n	8000ffa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e0ed      	b.n	80011d6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001000:	b2db      	uxtb	r3, r3
 8001002:	2b00      	cmp	r3, #0
 8001004:	d102      	bne.n	800100c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f7ff fdae 	bl	8000b68 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f042 0201 	orr.w	r2, r2, #1
 800101a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800101c:	f7ff ffb4 	bl	8000f88 <HAL_GetTick>
 8001020:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001022:	e012      	b.n	800104a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001024:	f7ff ffb0 	bl	8000f88 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b0a      	cmp	r3, #10
 8001030:	d90b      	bls.n	800104a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001036:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2205      	movs	r2, #5
 8001042:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e0c5      	b.n	80011d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	2b00      	cmp	r3, #0
 8001056:	d0e5      	beq.n	8001024 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f022 0202 	bic.w	r2, r2, #2
 8001066:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001068:	f7ff ff8e 	bl	8000f88 <HAL_GetTick>
 800106c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800106e:	e012      	b.n	8001096 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001070:	f7ff ff8a 	bl	8000f88 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	2b0a      	cmp	r3, #10
 800107c:	d90b      	bls.n	8001096 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001082:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2205      	movs	r2, #5
 800108e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e09f      	b.n	80011d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d1e5      	bne.n	8001070 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	7e1b      	ldrb	r3, [r3, #24]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d108      	bne.n	80010be <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	e007      	b.n	80010ce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	7e5b      	ldrb	r3, [r3, #25]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d108      	bne.n	80010e8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	e007      	b.n	80010f8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80010f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	7e9b      	ldrb	r3, [r3, #26]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d108      	bne.n	8001112 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f042 0220 	orr.w	r2, r2, #32
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	e007      	b.n	8001122 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f022 0220 	bic.w	r2, r2, #32
 8001120:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	7edb      	ldrb	r3, [r3, #27]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d108      	bne.n	800113c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f022 0210 	bic.w	r2, r2, #16
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	e007      	b.n	800114c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f042 0210 	orr.w	r2, r2, #16
 800114a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	7f1b      	ldrb	r3, [r3, #28]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d108      	bne.n	8001166 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f042 0208 	orr.w	r2, r2, #8
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	e007      	b.n	8001176 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f022 0208 	bic.w	r2, r2, #8
 8001174:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	7f5b      	ldrb	r3, [r3, #29]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d108      	bne.n	8001190 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f042 0204 	orr.w	r2, r2, #4
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	e007      	b.n	80011a0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f022 0204 	bic.w	r2, r2, #4
 800119e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	689a      	ldr	r2, [r3, #8]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	431a      	orrs	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	691b      	ldr	r3, [r3, #16]
 80011ae:	431a      	orrs	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	695b      	ldr	r3, [r3, #20]
 80011b4:	ea42 0103 	orr.w	r1, r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	1e5a      	subs	r2, r3, #1
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	430a      	orrs	r2, r1
 80011c4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2201      	movs	r2, #1
 80011d0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b087      	sub	sp, #28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011f6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80011f8:	7cfb      	ldrb	r3, [r7, #19]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d003      	beq.n	8001206 <HAL_CAN_ConfigFilter+0x26>
 80011fe:	7cfb      	ldrb	r3, [r7, #19]
 8001200:	2b02      	cmp	r3, #2
 8001202:	f040 80be 	bne.w	8001382 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001206:	4b65      	ldr	r3, [pc, #404]	; (800139c <HAL_CAN_ConfigFilter+0x1bc>)
 8001208:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001210:	f043 0201 	orr.w	r2, r3, #1
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001220:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001234:	021b      	lsls	r3, r3, #8
 8001236:	431a      	orrs	r2, r3
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	695b      	ldr	r3, [r3, #20]
 8001242:	f003 031f 	and.w	r3, r3, #31
 8001246:	2201      	movs	r2, #1
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	43db      	mvns	r3, r3
 8001258:	401a      	ands	r2, r3
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	69db      	ldr	r3, [r3, #28]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d123      	bne.n	80012b0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	43db      	mvns	r3, r3
 8001272:	401a      	ands	r2, r3
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001286:	683a      	ldr	r2, [r7, #0]
 8001288:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800128a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	3248      	adds	r2, #72	; 0x48
 8001290:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012a4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012a6:	6979      	ldr	r1, [r7, #20]
 80012a8:	3348      	adds	r3, #72	; 0x48
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	440b      	add	r3, r1
 80012ae:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	69db      	ldr	r3, [r3, #28]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d122      	bne.n	80012fe <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	431a      	orrs	r2, r3
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012d8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	3248      	adds	r2, #72	; 0x48
 80012de:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012f2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012f4:	6979      	ldr	r1, [r7, #20]
 80012f6:	3348      	adds	r3, #72	; 0x48
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	440b      	add	r3, r1
 80012fc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	699b      	ldr	r3, [r3, #24]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d109      	bne.n	800131a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	43db      	mvns	r3, r3
 8001310:	401a      	ands	r2, r3
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001318:	e007      	b.n	800132a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	431a      	orrs	r2, r3
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d109      	bne.n	8001346 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	43db      	mvns	r3, r3
 800133c:	401a      	ands	r2, r3
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001344:	e007      	b.n	8001356 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	431a      	orrs	r2, r3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	6a1b      	ldr	r3, [r3, #32]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d107      	bne.n	800136e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	431a      	orrs	r2, r3
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001374:	f023 0201 	bic.w	r2, r3, #1
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800137e:	2300      	movs	r3, #0
 8001380:	e006      	b.n	8001390 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001386:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
  }
}
 8001390:	4618      	mov	r0, r3
 8001392:	371c      	adds	r7, #28
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	40006400 	.word	0x40006400

080013a0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d12e      	bne.n	8001412 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2202      	movs	r2, #2
 80013b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f022 0201 	bic.w	r2, r2, #1
 80013ca:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80013cc:	f7ff fddc 	bl	8000f88 <HAL_GetTick>
 80013d0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013d2:	e012      	b.n	80013fa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013d4:	f7ff fdd8 	bl	8000f88 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b0a      	cmp	r3, #10
 80013e0:	d90b      	bls.n	80013fa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2205      	movs	r2, #5
 80013f2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e012      	b.n	8001420 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1e5      	bne.n	80013d4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	e006      	b.n	8001420 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001416:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
  }
}
 8001420:	4618      	mov	r0, r3
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001428:	b480      	push	{r7}
 800142a:	b089      	sub	sp, #36	; 0x24
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
 8001434:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f893 3020 	ldrb.w	r3, [r3, #32]
 800143c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001446:	7ffb      	ldrb	r3, [r7, #31]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d003      	beq.n	8001454 <HAL_CAN_AddTxMessage+0x2c>
 800144c:	7ffb      	ldrb	r3, [r7, #31]
 800144e:	2b02      	cmp	r3, #2
 8001450:	f040 80b8 	bne.w	80015c4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d10a      	bne.n	8001474 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001464:	2b00      	cmp	r3, #0
 8001466:	d105      	bne.n	8001474 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800146e:	2b00      	cmp	r3, #0
 8001470:	f000 80a0 	beq.w	80015b4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	0e1b      	lsrs	r3, r3, #24
 8001478:	f003 0303 	and.w	r3, r3, #3
 800147c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	2b02      	cmp	r3, #2
 8001482:	d907      	bls.n	8001494 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001488:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e09e      	b.n	80015d2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001494:	2201      	movs	r2, #1
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	409a      	lsls	r2, r3
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d10d      	bne.n	80014c2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014b0:	68f9      	ldr	r1, [r7, #12]
 80014b2:	6809      	ldr	r1, [r1, #0]
 80014b4:	431a      	orrs	r2, r3
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	3318      	adds	r3, #24
 80014ba:	011b      	lsls	r3, r3, #4
 80014bc:	440b      	add	r3, r1
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	e00f      	b.n	80014e2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014cc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014d2:	68f9      	ldr	r1, [r7, #12]
 80014d4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80014d6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	3318      	adds	r3, #24
 80014dc:	011b      	lsls	r3, r3, #4
 80014de:	440b      	add	r3, r1
 80014e0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	6819      	ldr	r1, [r3, #0]
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	691a      	ldr	r2, [r3, #16]
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	3318      	adds	r3, #24
 80014ee:	011b      	lsls	r3, r3, #4
 80014f0:	440b      	add	r3, r1
 80014f2:	3304      	adds	r3, #4
 80014f4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	7d1b      	ldrb	r3, [r3, #20]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d111      	bne.n	8001522 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	3318      	adds	r3, #24
 8001506:	011b      	lsls	r3, r3, #4
 8001508:	4413      	add	r3, r2
 800150a:	3304      	adds	r3, #4
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	6811      	ldr	r1, [r2, #0]
 8001512:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	3318      	adds	r3, #24
 800151a:	011b      	lsls	r3, r3, #4
 800151c:	440b      	add	r3, r1
 800151e:	3304      	adds	r3, #4
 8001520:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3307      	adds	r3, #7
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	061a      	lsls	r2, r3, #24
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	3306      	adds	r3, #6
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	041b      	lsls	r3, r3, #16
 8001532:	431a      	orrs	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3305      	adds	r3, #5
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	021b      	lsls	r3, r3, #8
 800153c:	4313      	orrs	r3, r2
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	3204      	adds	r2, #4
 8001542:	7812      	ldrb	r2, [r2, #0]
 8001544:	4610      	mov	r0, r2
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	6811      	ldr	r1, [r2, #0]
 800154a:	ea43 0200 	orr.w	r2, r3, r0
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	011b      	lsls	r3, r3, #4
 8001552:	440b      	add	r3, r1
 8001554:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001558:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	3303      	adds	r3, #3
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	061a      	lsls	r2, r3, #24
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	3302      	adds	r3, #2
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	041b      	lsls	r3, r3, #16
 800156a:	431a      	orrs	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3301      	adds	r3, #1
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	021b      	lsls	r3, r3, #8
 8001574:	4313      	orrs	r3, r2
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	7812      	ldrb	r2, [r2, #0]
 800157a:	4610      	mov	r0, r2
 800157c:	68fa      	ldr	r2, [r7, #12]
 800157e:	6811      	ldr	r1, [r2, #0]
 8001580:	ea43 0200 	orr.w	r2, r3, r0
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	011b      	lsls	r3, r3, #4
 8001588:	440b      	add	r3, r1
 800158a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800158e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	3318      	adds	r3, #24
 8001598:	011b      	lsls	r3, r3, #4
 800159a:	4413      	add	r3, r2
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	6811      	ldr	r1, [r2, #0]
 80015a2:	f043 0201 	orr.w	r2, r3, #1
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	3318      	adds	r3, #24
 80015aa:	011b      	lsls	r3, r3, #4
 80015ac:	440b      	add	r3, r1
 80015ae:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80015b0:	2300      	movs	r3, #0
 80015b2:	e00e      	b.n	80015d2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e006      	b.n	80015d2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
  }
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3724      	adds	r7, #36	; 0x24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80015de:	b480      	push	{r7}
 80015e0:	b087      	sub	sp, #28
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	60f8      	str	r0, [r7, #12]
 80015e6:	60b9      	str	r1, [r7, #8]
 80015e8:	607a      	str	r2, [r7, #4]
 80015ea:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015f2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80015f4:	7dfb      	ldrb	r3, [r7, #23]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d003      	beq.n	8001602 <HAL_CAN_GetRxMessage+0x24>
 80015fa:	7dfb      	ldrb	r3, [r7, #23]
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	f040 80f3 	bne.w	80017e8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d10e      	bne.n	8001626 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	f003 0303 	and.w	r3, r3, #3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d116      	bne.n	8001644 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e0e7      	b.n	80017f6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	f003 0303 	and.w	r3, r3, #3
 8001630:	2b00      	cmp	r3, #0
 8001632:	d107      	bne.n	8001644 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001638:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e0d8      	b.n	80017f6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	331b      	adds	r3, #27
 800164c:	011b      	lsls	r3, r3, #4
 800164e:	4413      	add	r3, r2
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0204 	and.w	r2, r3, #4
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d10c      	bne.n	800167c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	331b      	adds	r3, #27
 800166a:	011b      	lsls	r3, r3, #4
 800166c:	4413      	add	r3, r2
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	0d5b      	lsrs	r3, r3, #21
 8001672:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	e00b      	b.n	8001694 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	331b      	adds	r3, #27
 8001684:	011b      	lsls	r3, r3, #4
 8001686:	4413      	add	r3, r2
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	08db      	lsrs	r3, r3, #3
 800168c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	331b      	adds	r3, #27
 800169c:	011b      	lsls	r3, r3, #4
 800169e:	4413      	add	r3, r2
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0202 	and.w	r2, r3, #2
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	331b      	adds	r3, #27
 80016b2:	011b      	lsls	r3, r3, #4
 80016b4:	4413      	add	r3, r2
 80016b6:	3304      	adds	r3, #4
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 020f 	and.w	r2, r3, #15
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	331b      	adds	r3, #27
 80016ca:	011b      	lsls	r3, r3, #4
 80016cc:	4413      	add	r3, r2
 80016ce:	3304      	adds	r3, #4
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	0a1b      	lsrs	r3, r3, #8
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	331b      	adds	r3, #27
 80016e2:	011b      	lsls	r3, r3, #4
 80016e4:	4413      	add	r3, r2
 80016e6:	3304      	adds	r3, #4
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	0c1b      	lsrs	r3, r3, #16
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	011b      	lsls	r3, r3, #4
 80016fa:	4413      	add	r3, r2
 80016fc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	b2da      	uxtb	r2, r3
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	011b      	lsls	r3, r3, #4
 8001710:	4413      	add	r3, r2
 8001712:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	0a1a      	lsrs	r2, r3, #8
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	3301      	adds	r3, #1
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	011b      	lsls	r3, r3, #4
 800172a:	4413      	add	r3, r2
 800172c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	0c1a      	lsrs	r2, r3, #16
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	3302      	adds	r3, #2
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	011b      	lsls	r3, r3, #4
 8001744:	4413      	add	r3, r2
 8001746:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	0e1a      	lsrs	r2, r3, #24
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	3303      	adds	r3, #3
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	011b      	lsls	r3, r3, #4
 800175e:	4413      	add	r3, r2
 8001760:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	3304      	adds	r3, #4
 800176a:	b2d2      	uxtb	r2, r2
 800176c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	011b      	lsls	r3, r3, #4
 8001776:	4413      	add	r3, r2
 8001778:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	0a1a      	lsrs	r2, r3, #8
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	3305      	adds	r3, #5
 8001784:	b2d2      	uxtb	r2, r2
 8001786:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	011b      	lsls	r3, r3, #4
 8001790:	4413      	add	r3, r2
 8001792:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	0c1a      	lsrs	r2, r3, #16
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	3306      	adds	r3, #6
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	011b      	lsls	r3, r3, #4
 80017aa:	4413      	add	r3, r2
 80017ac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	0e1a      	lsrs	r2, r3, #24
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	3307      	adds	r3, #7
 80017b8:	b2d2      	uxtb	r2, r2
 80017ba:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d108      	bne.n	80017d4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	68da      	ldr	r2, [r3, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f042 0220 	orr.w	r2, r2, #32
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	e007      	b.n	80017e4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	691a      	ldr	r2, [r3, #16]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f042 0220 	orr.w	r2, r2, #32
 80017e2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80017e4:	2300      	movs	r3, #0
 80017e6:	e006      	b.n	80017f6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
  }
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	371c      	adds	r7, #28
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001802:	b480      	push	{r7}
 8001804:	b085      	sub	sp, #20
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
 800180a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001812:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001814:	7bfb      	ldrb	r3, [r7, #15]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d002      	beq.n	8001820 <HAL_CAN_ActivateNotification+0x1e>
 800181a:	7bfb      	ldrb	r3, [r7, #15]
 800181c:	2b02      	cmp	r3, #2
 800181e:	d109      	bne.n	8001834 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6959      	ldr	r1, [r3, #20]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	430a      	orrs	r2, r1
 800182e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001830:	2300      	movs	r3, #0
 8001832:	e006      	b.n	8001842 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001838:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
  }
}
 8001842:	4618      	mov	r0, r3
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b08a      	sub	sp, #40	; 0x28
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001856:	2300      	movs	r3, #0
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800188a:	6a3b      	ldr	r3, [r7, #32]
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	2b00      	cmp	r3, #0
 8001892:	d07c      	beq.n	800198e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	d023      	beq.n	80018e6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2201      	movs	r2, #1
 80018a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff f879 	bl	80009a8 <HAL_CAN_TxMailbox0CompleteCallback>
 80018b6:	e016      	b.n	80018e6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	f003 0304 	and.w	r3, r3, #4
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d004      	beq.n	80018cc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
 80018ca:	e00c      	b.n	80018e6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	f003 0308 	and.w	r3, r3, #8
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d004      	beq.n	80018e0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
 80018de:	e002      	b.n	80018e6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f000 f96b 	bl	8001bbc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d024      	beq.n	800193a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018f8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff f86f 	bl	80009e8 <HAL_CAN_TxMailbox1CompleteCallback>
 800190a:	e016      	b.n	800193a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001912:	2b00      	cmp	r3, #0
 8001914:	d004      	beq.n	8001920 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
 800191e:	e00c      	b.n	800193a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001926:	2b00      	cmp	r3, #0
 8001928:	d004      	beq.n	8001934 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
 8001932:	e002      	b.n	800193a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f000 f94b 	bl	8001bd0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d024      	beq.n	800198e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800194c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d003      	beq.n	8001960 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff f865 	bl	8000a28 <HAL_CAN_TxMailbox2CompleteCallback>
 800195e:	e016      	b.n	800198e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d004      	beq.n	8001974 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
 8001972:	e00c      	b.n	800198e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d004      	beq.n	8001988 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
 8001986:	e002      	b.n	800198e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f000 f92b 	bl	8001be4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800198e:	6a3b      	ldr	r3, [r7, #32]
 8001990:	f003 0308 	and.w	r3, r3, #8
 8001994:	2b00      	cmp	r3, #0
 8001996:	d00c      	beq.n	80019b2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	f003 0310 	and.w	r3, r3, #16
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d007      	beq.n	80019b2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2210      	movs	r2, #16
 80019b0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80019b2:	6a3b      	ldr	r3, [r7, #32]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d00b      	beq.n	80019d4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	f003 0308 	and.w	r3, r3, #8
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d006      	beq.n	80019d4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2208      	movs	r2, #8
 80019cc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f000 f912 	bl	8001bf8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80019d4:	6a3b      	ldr	r3, [r7, #32]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d009      	beq.n	80019f2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	f003 0303 	and.w	r3, r3, #3
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d002      	beq.n	80019f2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f7ff f83b 	bl	8000a68 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80019f2:	6a3b      	ldr	r3, [r7, #32]
 80019f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d00c      	beq.n	8001a16 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	f003 0310 	and.w	r3, r3, #16
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d007      	beq.n	8001a16 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2210      	movs	r2, #16
 8001a14:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001a16:	6a3b      	ldr	r3, [r7, #32]
 8001a18:	f003 0320 	and.w	r3, r3, #32
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d00b      	beq.n	8001a38 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	f003 0308 	and.w	r3, r3, #8
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d006      	beq.n	8001a38 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2208      	movs	r2, #8
 8001a30:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 f8f4 	bl	8001c20 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001a38:	6a3b      	ldr	r3, [r7, #32]
 8001a3a:	f003 0310 	and.w	r3, r3, #16
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d009      	beq.n	8001a56 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	f003 0303 	and.w	r3, r3, #3
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d002      	beq.n	8001a56 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 f8db 	bl	8001c0c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001a56:	6a3b      	ldr	r3, [r7, #32]
 8001a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d00b      	beq.n	8001a78 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	f003 0310 	and.w	r3, r3, #16
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d006      	beq.n	8001a78 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2210      	movs	r2, #16
 8001a70:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f8de 	bl	8001c34 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001a78:	6a3b      	ldr	r3, [r7, #32]
 8001a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d00b      	beq.n	8001a9a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	f003 0308 	and.w	r3, r3, #8
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d006      	beq.n	8001a9a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2208      	movs	r2, #8
 8001a92:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 f8d7 	bl	8001c48 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001a9a:	6a3b      	ldr	r3, [r7, #32]
 8001a9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d07b      	beq.n	8001b9c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	f003 0304 	and.w	r3, r3, #4
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d072      	beq.n	8001b94 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001aae:	6a3b      	ldr	r3, [r7, #32]
 8001ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d008      	beq.n	8001aca <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001aca:	6a3b      	ldr	r3, [r7, #32]
 8001acc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d008      	beq.n	8001ae6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	f043 0302 	orr.w	r3, r3, #2
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ae6:	6a3b      	ldr	r3, [r7, #32]
 8001ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d008      	beq.n	8001b02 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afc:	f043 0304 	orr.w	r3, r3, #4
 8001b00:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b02:	6a3b      	ldr	r3, [r7, #32]
 8001b04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d043      	beq.n	8001b94 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d03e      	beq.n	8001b94 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b1c:	2b60      	cmp	r3, #96	; 0x60
 8001b1e:	d02b      	beq.n	8001b78 <HAL_CAN_IRQHandler+0x32a>
 8001b20:	2b60      	cmp	r3, #96	; 0x60
 8001b22:	d82e      	bhi.n	8001b82 <HAL_CAN_IRQHandler+0x334>
 8001b24:	2b50      	cmp	r3, #80	; 0x50
 8001b26:	d022      	beq.n	8001b6e <HAL_CAN_IRQHandler+0x320>
 8001b28:	2b50      	cmp	r3, #80	; 0x50
 8001b2a:	d82a      	bhi.n	8001b82 <HAL_CAN_IRQHandler+0x334>
 8001b2c:	2b40      	cmp	r3, #64	; 0x40
 8001b2e:	d019      	beq.n	8001b64 <HAL_CAN_IRQHandler+0x316>
 8001b30:	2b40      	cmp	r3, #64	; 0x40
 8001b32:	d826      	bhi.n	8001b82 <HAL_CAN_IRQHandler+0x334>
 8001b34:	2b30      	cmp	r3, #48	; 0x30
 8001b36:	d010      	beq.n	8001b5a <HAL_CAN_IRQHandler+0x30c>
 8001b38:	2b30      	cmp	r3, #48	; 0x30
 8001b3a:	d822      	bhi.n	8001b82 <HAL_CAN_IRQHandler+0x334>
 8001b3c:	2b10      	cmp	r3, #16
 8001b3e:	d002      	beq.n	8001b46 <HAL_CAN_IRQHandler+0x2f8>
 8001b40:	2b20      	cmp	r3, #32
 8001b42:	d005      	beq.n	8001b50 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001b44:	e01d      	b.n	8001b82 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	f043 0308 	orr.w	r3, r3, #8
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b4e:	e019      	b.n	8001b84 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b52:	f043 0310 	orr.w	r3, r3, #16
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b58:	e014      	b.n	8001b84 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5c:	f043 0320 	orr.w	r3, r3, #32
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b62:	e00f      	b.n	8001b84 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b6c:	e00a      	b.n	8001b84 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b76:	e005      	b.n	8001b84 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001b80:	e000      	b.n	8001b84 <HAL_CAN_IRQHandler+0x336>
            break;
 8001b82:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	699a      	ldr	r2, [r3, #24]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001b92:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2204      	movs	r2, #4
 8001b9a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d008      	beq.n	8001bb4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7fe ff8c 	bl	8000acc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	3728      	adds	r7, #40	; 0x28
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c72:	68ba      	ldr	r2, [r7, #8]
 8001c74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c78:	4013      	ands	r3, r2
 8001c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c8e:	4a04      	ldr	r2, [pc, #16]	; (8001ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	60d3      	str	r3, [r2, #12]
}
 8001c94:	bf00      	nop
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca8:	4b04      	ldr	r3, [pc, #16]	; (8001cbc <__NVIC_GetPriorityGrouping+0x18>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	0a1b      	lsrs	r3, r3, #8
 8001cae:	f003 0307 	and.w	r3, r3, #7
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	db0b      	blt.n	8001cea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	f003 021f 	and.w	r2, r3, #31
 8001cd8:	4907      	ldr	r1, [pc, #28]	; (8001cf8 <__NVIC_EnableIRQ+0x38>)
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	095b      	lsrs	r3, r3, #5
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	e000e100 	.word	0xe000e100

08001cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	6039      	str	r1, [r7, #0]
 8001d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	db0a      	blt.n	8001d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	490c      	ldr	r1, [pc, #48]	; (8001d48 <__NVIC_SetPriority+0x4c>)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	0112      	lsls	r2, r2, #4
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	440b      	add	r3, r1
 8001d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d24:	e00a      	b.n	8001d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	4908      	ldr	r1, [pc, #32]	; (8001d4c <__NVIC_SetPriority+0x50>)
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	3b04      	subs	r3, #4
 8001d34:	0112      	lsls	r2, r2, #4
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	440b      	add	r3, r1
 8001d3a:	761a      	strb	r2, [r3, #24]
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	e000e100 	.word	0xe000e100
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b089      	sub	sp, #36	; 0x24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f1c3 0307 	rsb	r3, r3, #7
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	bf28      	it	cs
 8001d6e:	2304      	movcs	r3, #4
 8001d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	3304      	adds	r3, #4
 8001d76:	2b06      	cmp	r3, #6
 8001d78:	d902      	bls.n	8001d80 <NVIC_EncodePriority+0x30>
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3b03      	subs	r3, #3
 8001d7e:	e000      	b.n	8001d82 <NVIC_EncodePriority+0x32>
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d84:	f04f 32ff 	mov.w	r2, #4294967295
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43da      	mvns	r2, r3
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	401a      	ands	r2, r3
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d98:	f04f 31ff 	mov.w	r1, #4294967295
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001da2:	43d9      	mvns	r1, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da8:	4313      	orrs	r3, r2
         );
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3724      	adds	r7, #36	; 0x24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
	...

08001db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dc8:	d301      	bcc.n	8001dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e00f      	b.n	8001dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dce:	4a0a      	ldr	r2, [pc, #40]	; (8001df8 <SysTick_Config+0x40>)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dd6:	210f      	movs	r1, #15
 8001dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ddc:	f7ff ff8e 	bl	8001cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001de0:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <SysTick_Config+0x40>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001de6:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <SysTick_Config+0x40>)
 8001de8:	2207      	movs	r2, #7
 8001dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	e000e010 	.word	0xe000e010

08001dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff ff29 	bl	8001c5c <__NVIC_SetPriorityGrouping>
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b086      	sub	sp, #24
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	4603      	mov	r3, r0
 8001e1a:	60b9      	str	r1, [r7, #8]
 8001e1c:	607a      	str	r2, [r7, #4]
 8001e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e24:	f7ff ff3e 	bl	8001ca4 <__NVIC_GetPriorityGrouping>
 8001e28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	68b9      	ldr	r1, [r7, #8]
 8001e2e:	6978      	ldr	r0, [r7, #20]
 8001e30:	f7ff ff8e 	bl	8001d50 <NVIC_EncodePriority>
 8001e34:	4602      	mov	r2, r0
 8001e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff ff5d 	bl	8001cfc <__NVIC_SetPriority>
}
 8001e42:	bf00      	nop
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	4603      	mov	r3, r0
 8001e52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff ff31 	bl	8001cc0 <__NVIC_EnableIRQ>
}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff ffa2 	bl	8001db8 <SysTick_Config>
 8001e74:	4603      	mov	r3, r0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b089      	sub	sp, #36	; 0x24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
 8001e9a:	e165      	b.n	8002168 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	4013      	ands	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	f040 8154 	bne.w	8002162 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d005      	beq.n	8001ed2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d130      	bne.n	8001f34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	2203      	movs	r2, #3
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	68da      	ldr	r2, [r3, #12]
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f08:	2201      	movs	r2, #1
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4013      	ands	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	091b      	lsrs	r3, r3, #4
 8001f1e:	f003 0201 	and.w	r2, r3, #1
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f003 0303 	and.w	r3, r3, #3
 8001f3c:	2b03      	cmp	r3, #3
 8001f3e:	d017      	beq.n	8001f70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f003 0303 	and.w	r3, r3, #3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d123      	bne.n	8001fc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	08da      	lsrs	r2, r3, #3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3208      	adds	r2, #8
 8001f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	220f      	movs	r2, #15
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	691a      	ldr	r2, [r3, #16]
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	08da      	lsrs	r2, r3, #3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3208      	adds	r2, #8
 8001fbe:	69b9      	ldr	r1, [r7, #24]
 8001fc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	2203      	movs	r2, #3
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f003 0203 	and.w	r2, r3, #3
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002000:	2b00      	cmp	r3, #0
 8002002:	f000 80ae 	beq.w	8002162 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	4b5d      	ldr	r3, [pc, #372]	; (8002180 <HAL_GPIO_Init+0x300>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200e:	4a5c      	ldr	r2, [pc, #368]	; (8002180 <HAL_GPIO_Init+0x300>)
 8002010:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002014:	6453      	str	r3, [r2, #68]	; 0x44
 8002016:	4b5a      	ldr	r3, [pc, #360]	; (8002180 <HAL_GPIO_Init+0x300>)
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002022:	4a58      	ldr	r2, [pc, #352]	; (8002184 <HAL_GPIO_Init+0x304>)
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	089b      	lsrs	r3, r3, #2
 8002028:	3302      	adds	r3, #2
 800202a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	220f      	movs	r2, #15
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43db      	mvns	r3, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4013      	ands	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a4f      	ldr	r2, [pc, #316]	; (8002188 <HAL_GPIO_Init+0x308>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d025      	beq.n	800209a <HAL_GPIO_Init+0x21a>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a4e      	ldr	r2, [pc, #312]	; (800218c <HAL_GPIO_Init+0x30c>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d01f      	beq.n	8002096 <HAL_GPIO_Init+0x216>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a4d      	ldr	r2, [pc, #308]	; (8002190 <HAL_GPIO_Init+0x310>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d019      	beq.n	8002092 <HAL_GPIO_Init+0x212>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a4c      	ldr	r2, [pc, #304]	; (8002194 <HAL_GPIO_Init+0x314>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d013      	beq.n	800208e <HAL_GPIO_Init+0x20e>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a4b      	ldr	r2, [pc, #300]	; (8002198 <HAL_GPIO_Init+0x318>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d00d      	beq.n	800208a <HAL_GPIO_Init+0x20a>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a4a      	ldr	r2, [pc, #296]	; (800219c <HAL_GPIO_Init+0x31c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d007      	beq.n	8002086 <HAL_GPIO_Init+0x206>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a49      	ldr	r2, [pc, #292]	; (80021a0 <HAL_GPIO_Init+0x320>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d101      	bne.n	8002082 <HAL_GPIO_Init+0x202>
 800207e:	2306      	movs	r3, #6
 8002080:	e00c      	b.n	800209c <HAL_GPIO_Init+0x21c>
 8002082:	2307      	movs	r3, #7
 8002084:	e00a      	b.n	800209c <HAL_GPIO_Init+0x21c>
 8002086:	2305      	movs	r3, #5
 8002088:	e008      	b.n	800209c <HAL_GPIO_Init+0x21c>
 800208a:	2304      	movs	r3, #4
 800208c:	e006      	b.n	800209c <HAL_GPIO_Init+0x21c>
 800208e:	2303      	movs	r3, #3
 8002090:	e004      	b.n	800209c <HAL_GPIO_Init+0x21c>
 8002092:	2302      	movs	r3, #2
 8002094:	e002      	b.n	800209c <HAL_GPIO_Init+0x21c>
 8002096:	2301      	movs	r3, #1
 8002098:	e000      	b.n	800209c <HAL_GPIO_Init+0x21c>
 800209a:	2300      	movs	r3, #0
 800209c:	69fa      	ldr	r2, [r7, #28]
 800209e:	f002 0203 	and.w	r2, r2, #3
 80020a2:	0092      	lsls	r2, r2, #2
 80020a4:	4093      	lsls	r3, r2
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020ac:	4935      	ldr	r1, [pc, #212]	; (8002184 <HAL_GPIO_Init+0x304>)
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	089b      	lsrs	r3, r3, #2
 80020b2:	3302      	adds	r3, #2
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020ba:	4b3a      	ldr	r3, [pc, #232]	; (80021a4 <HAL_GPIO_Init+0x324>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	43db      	mvns	r3, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4013      	ands	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	4313      	orrs	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020de:	4a31      	ldr	r2, [pc, #196]	; (80021a4 <HAL_GPIO_Init+0x324>)
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020e4:	4b2f      	ldr	r3, [pc, #188]	; (80021a4 <HAL_GPIO_Init+0x324>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	43db      	mvns	r3, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4013      	ands	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002108:	4a26      	ldr	r2, [pc, #152]	; (80021a4 <HAL_GPIO_Init+0x324>)
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800210e:	4b25      	ldr	r3, [pc, #148]	; (80021a4 <HAL_GPIO_Init+0x324>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	43db      	mvns	r3, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4013      	ands	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002132:	4a1c      	ldr	r2, [pc, #112]	; (80021a4 <HAL_GPIO_Init+0x324>)
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002138:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <HAL_GPIO_Init+0x324>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	4313      	orrs	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800215c:	4a11      	ldr	r2, [pc, #68]	; (80021a4 <HAL_GPIO_Init+0x324>)
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	3301      	adds	r3, #1
 8002166:	61fb      	str	r3, [r7, #28]
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	2b0f      	cmp	r3, #15
 800216c:	f67f ae96 	bls.w	8001e9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002170:	bf00      	nop
 8002172:	bf00      	nop
 8002174:	3724      	adds	r7, #36	; 0x24
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40023800 	.word	0x40023800
 8002184:	40013800 	.word	0x40013800
 8002188:	40020000 	.word	0x40020000
 800218c:	40020400 	.word	0x40020400
 8002190:	40020800 	.word	0x40020800
 8002194:	40020c00 	.word	0x40020c00
 8002198:	40021000 	.word	0x40021000
 800219c:	40021400 	.word	0x40021400
 80021a0:	40021800 	.word	0x40021800
 80021a4:	40013c00 	.word	0x40013c00

080021a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	460b      	mov	r3, r1
 80021b2:	807b      	strh	r3, [r7, #2]
 80021b4:	4613      	mov	r3, r2
 80021b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021b8:	787b      	ldrb	r3, [r7, #1]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021be:	887a      	ldrh	r2, [r7, #2]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021c4:	e003      	b.n	80021ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021c6:	887b      	ldrh	r3, [r7, #2]
 80021c8:	041a      	lsls	r2, r3, #16
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	619a      	str	r2, [r3, #24]
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021da:	b480      	push	{r7}
 80021dc:	b085      	sub	sp, #20
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
 80021e2:	460b      	mov	r3, r1
 80021e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021ec:	887a      	ldrh	r2, [r7, #2]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	4013      	ands	r3, r2
 80021f2:	041a      	lsls	r2, r3, #16
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	43d9      	mvns	r1, r3
 80021f8:	887b      	ldrh	r3, [r7, #2]
 80021fa:	400b      	ands	r3, r1
 80021fc:	431a      	orrs	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	619a      	str	r2, [r3, #24]
}
 8002202:	bf00      	nop
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
	...

08002210 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e0cc      	b.n	80023be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002224:	4b68      	ldr	r3, [pc, #416]	; (80023c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 030f 	and.w	r3, r3, #15
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	429a      	cmp	r2, r3
 8002230:	d90c      	bls.n	800224c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002232:	4b65      	ldr	r3, [pc, #404]	; (80023c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800223a:	4b63      	ldr	r3, [pc, #396]	; (80023c8 <HAL_RCC_ClockConfig+0x1b8>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	429a      	cmp	r2, r3
 8002246:	d001      	beq.n	800224c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e0b8      	b.n	80023be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d020      	beq.n	800229a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	d005      	beq.n	8002270 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002264:	4b59      	ldr	r3, [pc, #356]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	4a58      	ldr	r2, [pc, #352]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 800226a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800226e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0308 	and.w	r3, r3, #8
 8002278:	2b00      	cmp	r3, #0
 800227a:	d005      	beq.n	8002288 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800227c:	4b53      	ldr	r3, [pc, #332]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	4a52      	ldr	r2, [pc, #328]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002282:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002286:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002288:	4b50      	ldr	r3, [pc, #320]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	494d      	ldr	r1, [pc, #308]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002296:	4313      	orrs	r3, r2
 8002298:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d044      	beq.n	8002330 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d107      	bne.n	80022be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ae:	4b47      	ldr	r3, [pc, #284]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d119      	bne.n	80022ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e07f      	b.n	80023be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d003      	beq.n	80022ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022ca:	2b03      	cmp	r3, #3
 80022cc:	d107      	bne.n	80022de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ce:	4b3f      	ldr	r3, [pc, #252]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d109      	bne.n	80022ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e06f      	b.n	80023be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022de:	4b3b      	ldr	r3, [pc, #236]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e067      	b.n	80023be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ee:	4b37      	ldr	r3, [pc, #220]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f023 0203 	bic.w	r2, r3, #3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	4934      	ldr	r1, [pc, #208]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002300:	f7fe fe42 	bl	8000f88 <HAL_GetTick>
 8002304:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002306:	e00a      	b.n	800231e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002308:	f7fe fe3e 	bl	8000f88 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	f241 3288 	movw	r2, #5000	; 0x1388
 8002316:	4293      	cmp	r3, r2
 8002318:	d901      	bls.n	800231e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e04f      	b.n	80023be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231e:	4b2b      	ldr	r3, [pc, #172]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 020c 	and.w	r2, r3, #12
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	429a      	cmp	r2, r3
 800232e:	d1eb      	bne.n	8002308 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002330:	4b25      	ldr	r3, [pc, #148]	; (80023c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 030f 	and.w	r3, r3, #15
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	429a      	cmp	r2, r3
 800233c:	d20c      	bcs.n	8002358 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233e:	4b22      	ldr	r3, [pc, #136]	; (80023c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002346:	4b20      	ldr	r3, [pc, #128]	; (80023c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	429a      	cmp	r2, r3
 8002352:	d001      	beq.n	8002358 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e032      	b.n	80023be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b00      	cmp	r3, #0
 8002362:	d008      	beq.n	8002376 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002364:	4b19      	ldr	r3, [pc, #100]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	4916      	ldr	r1, [pc, #88]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	4313      	orrs	r3, r2
 8002374:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0308 	and.w	r3, r3, #8
 800237e:	2b00      	cmp	r3, #0
 8002380:	d009      	beq.n	8002396 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002382:	4b12      	ldr	r3, [pc, #72]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	490e      	ldr	r1, [pc, #56]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 8002392:	4313      	orrs	r3, r2
 8002394:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002396:	f000 f855 	bl	8002444 <HAL_RCC_GetSysClockFreq>
 800239a:	4602      	mov	r2, r0
 800239c:	4b0b      	ldr	r3, [pc, #44]	; (80023cc <HAL_RCC_ClockConfig+0x1bc>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	091b      	lsrs	r3, r3, #4
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	490a      	ldr	r1, [pc, #40]	; (80023d0 <HAL_RCC_ClockConfig+0x1c0>)
 80023a8:	5ccb      	ldrb	r3, [r1, r3]
 80023aa:	fa22 f303 	lsr.w	r3, r2, r3
 80023ae:	4a09      	ldr	r2, [pc, #36]	; (80023d4 <HAL_RCC_ClockConfig+0x1c4>)
 80023b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023b2:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <HAL_RCC_ClockConfig+0x1c8>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fe fda2 	bl	8000f00 <HAL_InitTick>

  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40023c00 	.word	0x40023c00
 80023cc:	40023800 	.word	0x40023800
 80023d0:	08003c9c 	.word	0x08003c9c
 80023d4:	20000000 	.word	0x20000000
 80023d8:	20000004 	.word	0x20000004

080023dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023e0:	4b03      	ldr	r3, [pc, #12]	; (80023f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80023e2:	681b      	ldr	r3, [r3, #0]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	20000000 	.word	0x20000000

080023f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023f8:	f7ff fff0 	bl	80023dc <HAL_RCC_GetHCLKFreq>
 80023fc:	4602      	mov	r2, r0
 80023fe:	4b05      	ldr	r3, [pc, #20]	; (8002414 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	0a9b      	lsrs	r3, r3, #10
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	4903      	ldr	r1, [pc, #12]	; (8002418 <HAL_RCC_GetPCLK1Freq+0x24>)
 800240a:	5ccb      	ldrb	r3, [r1, r3]
 800240c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002410:	4618      	mov	r0, r3
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40023800 	.word	0x40023800
 8002418:	08003cac 	.word	0x08003cac

0800241c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002420:	f7ff ffdc 	bl	80023dc <HAL_RCC_GetHCLKFreq>
 8002424:	4602      	mov	r2, r0
 8002426:	4b05      	ldr	r3, [pc, #20]	; (800243c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	0b5b      	lsrs	r3, r3, #13
 800242c:	f003 0307 	and.w	r3, r3, #7
 8002430:	4903      	ldr	r1, [pc, #12]	; (8002440 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002432:	5ccb      	ldrb	r3, [r1, r3]
 8002434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002438:	4618      	mov	r0, r3
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40023800 	.word	0x40023800
 8002440:	08003cac 	.word	0x08003cac

08002444 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002444:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002448:	b088      	sub	sp, #32
 800244a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800244c:	2300      	movs	r3, #0
 800244e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8002450:	2300      	movs	r3, #0
 8002452:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8002454:	2300      	movs	r3, #0
 8002456:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8002458:	2300      	movs	r3, #0
 800245a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800245c:	2300      	movs	r3, #0
 800245e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002460:	4bce      	ldr	r3, [pc, #824]	; (800279c <HAL_RCC_GetSysClockFreq+0x358>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 030c 	and.w	r3, r3, #12
 8002468:	2b0c      	cmp	r3, #12
 800246a:	f200 818d 	bhi.w	8002788 <HAL_RCC_GetSysClockFreq+0x344>
 800246e:	a201      	add	r2, pc, #4	; (adr r2, 8002474 <HAL_RCC_GetSysClockFreq+0x30>)
 8002470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002474:	080024a9 	.word	0x080024a9
 8002478:	08002789 	.word	0x08002789
 800247c:	08002789 	.word	0x08002789
 8002480:	08002789 	.word	0x08002789
 8002484:	080024af 	.word	0x080024af
 8002488:	08002789 	.word	0x08002789
 800248c:	08002789 	.word	0x08002789
 8002490:	08002789 	.word	0x08002789
 8002494:	080024b5 	.word	0x080024b5
 8002498:	08002789 	.word	0x08002789
 800249c:	08002789 	.word	0x08002789
 80024a0:	08002789 	.word	0x08002789
 80024a4:	08002629 	.word	0x08002629
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024a8:	4bbd      	ldr	r3, [pc, #756]	; (80027a0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80024aa:	61bb      	str	r3, [r7, #24]
       break;
 80024ac:	e16f      	b.n	800278e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024ae:	4bbd      	ldr	r3, [pc, #756]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x360>)
 80024b0:	61bb      	str	r3, [r7, #24]
      break;
 80024b2:	e16c      	b.n	800278e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024b4:	4bb9      	ldr	r3, [pc, #740]	; (800279c <HAL_RCC_GetSysClockFreq+0x358>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024bc:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024be:	4bb7      	ldr	r3, [pc, #732]	; (800279c <HAL_RCC_GetSysClockFreq+0x358>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d053      	beq.n	8002572 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ca:	4bb4      	ldr	r3, [pc, #720]	; (800279c <HAL_RCC_GetSysClockFreq+0x358>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	099b      	lsrs	r3, r3, #6
 80024d0:	461a      	mov	r2, r3
 80024d2:	f04f 0300 	mov.w	r3, #0
 80024d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80024da:	f04f 0100 	mov.w	r1, #0
 80024de:	ea02 0400 	and.w	r4, r2, r0
 80024e2:	603c      	str	r4, [r7, #0]
 80024e4:	400b      	ands	r3, r1
 80024e6:	607b      	str	r3, [r7, #4]
 80024e8:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024ec:	4620      	mov	r0, r4
 80024ee:	4629      	mov	r1, r5
 80024f0:	f04f 0200 	mov.w	r2, #0
 80024f4:	f04f 0300 	mov.w	r3, #0
 80024f8:	014b      	lsls	r3, r1, #5
 80024fa:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80024fe:	0142      	lsls	r2, r0, #5
 8002500:	4610      	mov	r0, r2
 8002502:	4619      	mov	r1, r3
 8002504:	4623      	mov	r3, r4
 8002506:	1ac0      	subs	r0, r0, r3
 8002508:	462b      	mov	r3, r5
 800250a:	eb61 0103 	sbc.w	r1, r1, r3
 800250e:	f04f 0200 	mov.w	r2, #0
 8002512:	f04f 0300 	mov.w	r3, #0
 8002516:	018b      	lsls	r3, r1, #6
 8002518:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800251c:	0182      	lsls	r2, r0, #6
 800251e:	1a12      	subs	r2, r2, r0
 8002520:	eb63 0301 	sbc.w	r3, r3, r1
 8002524:	f04f 0000 	mov.w	r0, #0
 8002528:	f04f 0100 	mov.w	r1, #0
 800252c:	00d9      	lsls	r1, r3, #3
 800252e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002532:	00d0      	lsls	r0, r2, #3
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	4621      	mov	r1, r4
 800253a:	1852      	adds	r2, r2, r1
 800253c:	4629      	mov	r1, r5
 800253e:	eb43 0101 	adc.w	r1, r3, r1
 8002542:	460b      	mov	r3, r1
 8002544:	f04f 0000 	mov.w	r0, #0
 8002548:	f04f 0100 	mov.w	r1, #0
 800254c:	0259      	lsls	r1, r3, #9
 800254e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002552:	0250      	lsls	r0, r2, #9
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4610      	mov	r0, r2
 800255a:	4619      	mov	r1, r3
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	461a      	mov	r2, r3
 8002560:	f04f 0300 	mov.w	r3, #0
 8002564:	f7fd feac 	bl	80002c0 <__aeabi_uldivmod>
 8002568:	4602      	mov	r2, r0
 800256a:	460b      	mov	r3, r1
 800256c:	4613      	mov	r3, r2
 800256e:	61fb      	str	r3, [r7, #28]
 8002570:	e04c      	b.n	800260c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002572:	4b8a      	ldr	r3, [pc, #552]	; (800279c <HAL_RCC_GetSysClockFreq+0x358>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	099b      	lsrs	r3, r3, #6
 8002578:	461a      	mov	r2, r3
 800257a:	f04f 0300 	mov.w	r3, #0
 800257e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002582:	f04f 0100 	mov.w	r1, #0
 8002586:	ea02 0a00 	and.w	sl, r2, r0
 800258a:	ea03 0b01 	and.w	fp, r3, r1
 800258e:	4650      	mov	r0, sl
 8002590:	4659      	mov	r1, fp
 8002592:	f04f 0200 	mov.w	r2, #0
 8002596:	f04f 0300 	mov.w	r3, #0
 800259a:	014b      	lsls	r3, r1, #5
 800259c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80025a0:	0142      	lsls	r2, r0, #5
 80025a2:	4610      	mov	r0, r2
 80025a4:	4619      	mov	r1, r3
 80025a6:	ebb0 000a 	subs.w	r0, r0, sl
 80025aa:	eb61 010b 	sbc.w	r1, r1, fp
 80025ae:	f04f 0200 	mov.w	r2, #0
 80025b2:	f04f 0300 	mov.w	r3, #0
 80025b6:	018b      	lsls	r3, r1, #6
 80025b8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80025bc:	0182      	lsls	r2, r0, #6
 80025be:	1a12      	subs	r2, r2, r0
 80025c0:	eb63 0301 	sbc.w	r3, r3, r1
 80025c4:	f04f 0000 	mov.w	r0, #0
 80025c8:	f04f 0100 	mov.w	r1, #0
 80025cc:	00d9      	lsls	r1, r3, #3
 80025ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025d2:	00d0      	lsls	r0, r2, #3
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	eb12 020a 	adds.w	r2, r2, sl
 80025dc:	eb43 030b 	adc.w	r3, r3, fp
 80025e0:	f04f 0000 	mov.w	r0, #0
 80025e4:	f04f 0100 	mov.w	r1, #0
 80025e8:	0299      	lsls	r1, r3, #10
 80025ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80025ee:	0290      	lsls	r0, r2, #10
 80025f0:	4602      	mov	r2, r0
 80025f2:	460b      	mov	r3, r1
 80025f4:	4610      	mov	r0, r2
 80025f6:	4619      	mov	r1, r3
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	461a      	mov	r2, r3
 80025fc:	f04f 0300 	mov.w	r3, #0
 8002600:	f7fd fe5e 	bl	80002c0 <__aeabi_uldivmod>
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	4613      	mov	r3, r2
 800260a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800260c:	4b63      	ldr	r3, [pc, #396]	; (800279c <HAL_RCC_GetSysClockFreq+0x358>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	0c1b      	lsrs	r3, r3, #16
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	3301      	adds	r3, #1
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800261c:	69fa      	ldr	r2, [r7, #28]
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	fbb2 f3f3 	udiv	r3, r2, r3
 8002624:	61bb      	str	r3, [r7, #24]
      break;
 8002626:	e0b2      	b.n	800278e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002628:	4b5c      	ldr	r3, [pc, #368]	; (800279c <HAL_RCC_GetSysClockFreq+0x358>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002630:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002632:	4b5a      	ldr	r3, [pc, #360]	; (800279c <HAL_RCC_GetSysClockFreq+0x358>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d04d      	beq.n	80026da <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800263e:	4b57      	ldr	r3, [pc, #348]	; (800279c <HAL_RCC_GetSysClockFreq+0x358>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	099b      	lsrs	r3, r3, #6
 8002644:	461a      	mov	r2, r3
 8002646:	f04f 0300 	mov.w	r3, #0
 800264a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800264e:	f04f 0100 	mov.w	r1, #0
 8002652:	ea02 0800 	and.w	r8, r2, r0
 8002656:	ea03 0901 	and.w	r9, r3, r1
 800265a:	4640      	mov	r0, r8
 800265c:	4649      	mov	r1, r9
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	f04f 0300 	mov.w	r3, #0
 8002666:	014b      	lsls	r3, r1, #5
 8002668:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800266c:	0142      	lsls	r2, r0, #5
 800266e:	4610      	mov	r0, r2
 8002670:	4619      	mov	r1, r3
 8002672:	ebb0 0008 	subs.w	r0, r0, r8
 8002676:	eb61 0109 	sbc.w	r1, r1, r9
 800267a:	f04f 0200 	mov.w	r2, #0
 800267e:	f04f 0300 	mov.w	r3, #0
 8002682:	018b      	lsls	r3, r1, #6
 8002684:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002688:	0182      	lsls	r2, r0, #6
 800268a:	1a12      	subs	r2, r2, r0
 800268c:	eb63 0301 	sbc.w	r3, r3, r1
 8002690:	f04f 0000 	mov.w	r0, #0
 8002694:	f04f 0100 	mov.w	r1, #0
 8002698:	00d9      	lsls	r1, r3, #3
 800269a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800269e:	00d0      	lsls	r0, r2, #3
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	eb12 0208 	adds.w	r2, r2, r8
 80026a8:	eb43 0309 	adc.w	r3, r3, r9
 80026ac:	f04f 0000 	mov.w	r0, #0
 80026b0:	f04f 0100 	mov.w	r1, #0
 80026b4:	0259      	lsls	r1, r3, #9
 80026b6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80026ba:	0250      	lsls	r0, r2, #9
 80026bc:	4602      	mov	r2, r0
 80026be:	460b      	mov	r3, r1
 80026c0:	4610      	mov	r0, r2
 80026c2:	4619      	mov	r1, r3
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	461a      	mov	r2, r3
 80026c8:	f04f 0300 	mov.w	r3, #0
 80026cc:	f7fd fdf8 	bl	80002c0 <__aeabi_uldivmod>
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	4613      	mov	r3, r2
 80026d6:	61fb      	str	r3, [r7, #28]
 80026d8:	e04a      	b.n	8002770 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026da:	4b30      	ldr	r3, [pc, #192]	; (800279c <HAL_RCC_GetSysClockFreq+0x358>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	099b      	lsrs	r3, r3, #6
 80026e0:	461a      	mov	r2, r3
 80026e2:	f04f 0300 	mov.w	r3, #0
 80026e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80026ea:	f04f 0100 	mov.w	r1, #0
 80026ee:	ea02 0400 	and.w	r4, r2, r0
 80026f2:	ea03 0501 	and.w	r5, r3, r1
 80026f6:	4620      	mov	r0, r4
 80026f8:	4629      	mov	r1, r5
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	f04f 0300 	mov.w	r3, #0
 8002702:	014b      	lsls	r3, r1, #5
 8002704:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002708:	0142      	lsls	r2, r0, #5
 800270a:	4610      	mov	r0, r2
 800270c:	4619      	mov	r1, r3
 800270e:	1b00      	subs	r0, r0, r4
 8002710:	eb61 0105 	sbc.w	r1, r1, r5
 8002714:	f04f 0200 	mov.w	r2, #0
 8002718:	f04f 0300 	mov.w	r3, #0
 800271c:	018b      	lsls	r3, r1, #6
 800271e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002722:	0182      	lsls	r2, r0, #6
 8002724:	1a12      	subs	r2, r2, r0
 8002726:	eb63 0301 	sbc.w	r3, r3, r1
 800272a:	f04f 0000 	mov.w	r0, #0
 800272e:	f04f 0100 	mov.w	r1, #0
 8002732:	00d9      	lsls	r1, r3, #3
 8002734:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002738:	00d0      	lsls	r0, r2, #3
 800273a:	4602      	mov	r2, r0
 800273c:	460b      	mov	r3, r1
 800273e:	1912      	adds	r2, r2, r4
 8002740:	eb45 0303 	adc.w	r3, r5, r3
 8002744:	f04f 0000 	mov.w	r0, #0
 8002748:	f04f 0100 	mov.w	r1, #0
 800274c:	0299      	lsls	r1, r3, #10
 800274e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002752:	0290      	lsls	r0, r2, #10
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	4610      	mov	r0, r2
 800275a:	4619      	mov	r1, r3
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	461a      	mov	r2, r3
 8002760:	f04f 0300 	mov.w	r3, #0
 8002764:	f7fd fdac 	bl	80002c0 <__aeabi_uldivmod>
 8002768:	4602      	mov	r2, r0
 800276a:	460b      	mov	r3, r1
 800276c:	4613      	mov	r3, r2
 800276e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002770:	4b0a      	ldr	r3, [pc, #40]	; (800279c <HAL_RCC_GetSysClockFreq+0x358>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	0f1b      	lsrs	r3, r3, #28
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800277c:	69fa      	ldr	r2, [r7, #28]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	fbb2 f3f3 	udiv	r3, r2, r3
 8002784:	61bb      	str	r3, [r7, #24]
      break;
 8002786:	e002      	b.n	800278e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002788:	4b05      	ldr	r3, [pc, #20]	; (80027a0 <HAL_RCC_GetSysClockFreq+0x35c>)
 800278a:	61bb      	str	r3, [r7, #24]
      break;
 800278c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800278e:	69bb      	ldr	r3, [r7, #24]
}
 8002790:	4618      	mov	r0, r3
 8002792:	3720      	adds	r7, #32
 8002794:	46bd      	mov	sp, r7
 8002796:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800279a:	bf00      	nop
 800279c:	40023800 	.word	0x40023800
 80027a0:	00f42400 	.word	0x00f42400
 80027a4:	007a1200 	.word	0x007a1200

080027a8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e28d      	b.n	8002cd6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f000 8083 	beq.w	80028ce <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80027c8:	4b94      	ldr	r3, [pc, #592]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f003 030c 	and.w	r3, r3, #12
 80027d0:	2b04      	cmp	r3, #4
 80027d2:	d019      	beq.n	8002808 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80027d4:	4b91      	ldr	r3, [pc, #580]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d106      	bne.n	80027ee <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80027e0:	4b8e      	ldr	r3, [pc, #568]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027ec:	d00c      	beq.n	8002808 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ee:	4b8b      	ldr	r3, [pc, #556]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80027f6:	2b0c      	cmp	r3, #12
 80027f8:	d112      	bne.n	8002820 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027fa:	4b88      	ldr	r3, [pc, #544]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002802:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002806:	d10b      	bne.n	8002820 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002808:	4b84      	ldr	r3, [pc, #528]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d05b      	beq.n	80028cc <HAL_RCC_OscConfig+0x124>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d157      	bne.n	80028cc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e25a      	b.n	8002cd6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002828:	d106      	bne.n	8002838 <HAL_RCC_OscConfig+0x90>
 800282a:	4b7c      	ldr	r3, [pc, #496]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a7b      	ldr	r2, [pc, #492]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 8002830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	e01d      	b.n	8002874 <HAL_RCC_OscConfig+0xcc>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002840:	d10c      	bne.n	800285c <HAL_RCC_OscConfig+0xb4>
 8002842:	4b76      	ldr	r3, [pc, #472]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a75      	ldr	r2, [pc, #468]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 8002848:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	4b73      	ldr	r3, [pc, #460]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a72      	ldr	r2, [pc, #456]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 8002854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002858:	6013      	str	r3, [r2, #0]
 800285a:	e00b      	b.n	8002874 <HAL_RCC_OscConfig+0xcc>
 800285c:	4b6f      	ldr	r3, [pc, #444]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a6e      	ldr	r2, [pc, #440]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 8002862:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002866:	6013      	str	r3, [r2, #0]
 8002868:	4b6c      	ldr	r3, [pc, #432]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a6b      	ldr	r2, [pc, #428]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 800286e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002872:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d013      	beq.n	80028a4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287c:	f7fe fb84 	bl	8000f88 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002884:	f7fe fb80 	bl	8000f88 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b64      	cmp	r3, #100	; 0x64
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e21f      	b.n	8002cd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002896:	4b61      	ldr	r3, [pc, #388]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0f0      	beq.n	8002884 <HAL_RCC_OscConfig+0xdc>
 80028a2:	e014      	b.n	80028ce <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a4:	f7fe fb70 	bl	8000f88 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028ac:	f7fe fb6c 	bl	8000f88 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b64      	cmp	r3, #100	; 0x64
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e20b      	b.n	8002cd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028be:	4b57      	ldr	r3, [pc, #348]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1f0      	bne.n	80028ac <HAL_RCC_OscConfig+0x104>
 80028ca:	e000      	b.n	80028ce <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d06f      	beq.n	80029ba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80028da:	4b50      	ldr	r3, [pc, #320]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 030c 	and.w	r3, r3, #12
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d017      	beq.n	8002916 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80028e6:	4b4d      	ldr	r3, [pc, #308]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80028ee:	2b08      	cmp	r3, #8
 80028f0:	d105      	bne.n	80028fe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80028f2:	4b4a      	ldr	r3, [pc, #296]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00b      	beq.n	8002916 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028fe:	4b47      	ldr	r3, [pc, #284]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002906:	2b0c      	cmp	r3, #12
 8002908:	d11c      	bne.n	8002944 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800290a:	4b44      	ldr	r3, [pc, #272]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d116      	bne.n	8002944 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002916:	4b41      	ldr	r3, [pc, #260]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d005      	beq.n	800292e <HAL_RCC_OscConfig+0x186>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d001      	beq.n	800292e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e1d3      	b.n	8002cd6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800292e:	4b3b      	ldr	r3, [pc, #236]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	4937      	ldr	r1, [pc, #220]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 800293e:	4313      	orrs	r3, r2
 8002940:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002942:	e03a      	b.n	80029ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d020      	beq.n	800298e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800294c:	4b34      	ldr	r3, [pc, #208]	; (8002a20 <HAL_RCC_OscConfig+0x278>)
 800294e:	2201      	movs	r2, #1
 8002950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002952:	f7fe fb19 	bl	8000f88 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800295a:	f7fe fb15 	bl	8000f88 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e1b4      	b.n	8002cd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800296c:	4b2b      	ldr	r3, [pc, #172]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0f0      	beq.n	800295a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002978:	4b28      	ldr	r3, [pc, #160]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	4925      	ldr	r1, [pc, #148]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 8002988:	4313      	orrs	r3, r2
 800298a:	600b      	str	r3, [r1, #0]
 800298c:	e015      	b.n	80029ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800298e:	4b24      	ldr	r3, [pc, #144]	; (8002a20 <HAL_RCC_OscConfig+0x278>)
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002994:	f7fe faf8 	bl	8000f88 <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800299c:	f7fe faf4 	bl	8000f88 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e193      	b.n	8002cd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ae:	4b1b      	ldr	r3, [pc, #108]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f0      	bne.n	800299c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0308 	and.w	r3, r3, #8
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d036      	beq.n	8002a34 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d016      	beq.n	80029fc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ce:	4b15      	ldr	r3, [pc, #84]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 80029d0:	2201      	movs	r2, #1
 80029d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d4:	f7fe fad8 	bl	8000f88 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029dc:	f7fe fad4 	bl	8000f88 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e173      	b.n	8002cd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ee:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <HAL_RCC_OscConfig+0x274>)
 80029f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0f0      	beq.n	80029dc <HAL_RCC_OscConfig+0x234>
 80029fa:	e01b      	b.n	8002a34 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029fc:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <HAL_RCC_OscConfig+0x27c>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a02:	f7fe fac1 	bl	8000f88 <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a08:	e00e      	b.n	8002a28 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a0a:	f7fe fabd 	bl	8000f88 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d907      	bls.n	8002a28 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e15c      	b.n	8002cd6 <HAL_RCC_OscConfig+0x52e>
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	42470000 	.word	0x42470000
 8002a24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a28:	4b8a      	ldr	r3, [pc, #552]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002a2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1ea      	bne.n	8002a0a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 8097 	beq.w	8002b70 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a42:	2300      	movs	r3, #0
 8002a44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a46:	4b83      	ldr	r3, [pc, #524]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10f      	bne.n	8002a72 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	60bb      	str	r3, [r7, #8]
 8002a56:	4b7f      	ldr	r3, [pc, #508]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	4a7e      	ldr	r2, [pc, #504]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a60:	6413      	str	r3, [r2, #64]	; 0x40
 8002a62:	4b7c      	ldr	r3, [pc, #496]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6a:	60bb      	str	r3, [r7, #8]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a72:	4b79      	ldr	r3, [pc, #484]	; (8002c58 <HAL_RCC_OscConfig+0x4b0>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d118      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a7e:	4b76      	ldr	r3, [pc, #472]	; (8002c58 <HAL_RCC_OscConfig+0x4b0>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a75      	ldr	r2, [pc, #468]	; (8002c58 <HAL_RCC_OscConfig+0x4b0>)
 8002a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a8a:	f7fe fa7d 	bl	8000f88 <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a92:	f7fe fa79 	bl	8000f88 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e118      	b.n	8002cd6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa4:	4b6c      	ldr	r3, [pc, #432]	; (8002c58 <HAL_RCC_OscConfig+0x4b0>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0f0      	beq.n	8002a92 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d106      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x31e>
 8002ab8:	4b66      	ldr	r3, [pc, #408]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002abc:	4a65      	ldr	r2, [pc, #404]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002abe:	f043 0301 	orr.w	r3, r3, #1
 8002ac2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ac4:	e01c      	b.n	8002b00 <HAL_RCC_OscConfig+0x358>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	2b05      	cmp	r3, #5
 8002acc:	d10c      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x340>
 8002ace:	4b61      	ldr	r3, [pc, #388]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad2:	4a60      	ldr	r2, [pc, #384]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002ad4:	f043 0304 	orr.w	r3, r3, #4
 8002ad8:	6713      	str	r3, [r2, #112]	; 0x70
 8002ada:	4b5e      	ldr	r3, [pc, #376]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ade:	4a5d      	ldr	r2, [pc, #372]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002ae0:	f043 0301 	orr.w	r3, r3, #1
 8002ae4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae6:	e00b      	b.n	8002b00 <HAL_RCC_OscConfig+0x358>
 8002ae8:	4b5a      	ldr	r3, [pc, #360]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aec:	4a59      	ldr	r2, [pc, #356]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002aee:	f023 0301 	bic.w	r3, r3, #1
 8002af2:	6713      	str	r3, [r2, #112]	; 0x70
 8002af4:	4b57      	ldr	r3, [pc, #348]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af8:	4a56      	ldr	r2, [pc, #344]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002afa:	f023 0304 	bic.w	r3, r3, #4
 8002afe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d015      	beq.n	8002b34 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b08:	f7fe fa3e 	bl	8000f88 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b0e:	e00a      	b.n	8002b26 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b10:	f7fe fa3a 	bl	8000f88 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e0d7      	b.n	8002cd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b26:	4b4b      	ldr	r3, [pc, #300]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0ee      	beq.n	8002b10 <HAL_RCC_OscConfig+0x368>
 8002b32:	e014      	b.n	8002b5e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b34:	f7fe fa28 	bl	8000f88 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b3a:	e00a      	b.n	8002b52 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b3c:	f7fe fa24 	bl	8000f88 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e0c1      	b.n	8002cd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b52:	4b40      	ldr	r3, [pc, #256]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1ee      	bne.n	8002b3c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b5e:	7dfb      	ldrb	r3, [r7, #23]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d105      	bne.n	8002b70 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b64:	4b3b      	ldr	r3, [pc, #236]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	4a3a      	ldr	r2, [pc, #232]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002b6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 80ad 	beq.w	8002cd4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b7a:	4b36      	ldr	r3, [pc, #216]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 030c 	and.w	r3, r3, #12
 8002b82:	2b08      	cmp	r3, #8
 8002b84:	d060      	beq.n	8002c48 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d145      	bne.n	8002c1a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b8e:	4b33      	ldr	r3, [pc, #204]	; (8002c5c <HAL_RCC_OscConfig+0x4b4>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b94:	f7fe f9f8 	bl	8000f88 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b9c:	f7fe f9f4 	bl	8000f88 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e093      	b.n	8002cd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bae:	4b29      	ldr	r3, [pc, #164]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f0      	bne.n	8002b9c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69da      	ldr	r2, [r3, #28]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc8:	019b      	lsls	r3, r3, #6
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd0:	085b      	lsrs	r3, r3, #1
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	041b      	lsls	r3, r3, #16
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bdc:	061b      	lsls	r3, r3, #24
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be4:	071b      	lsls	r3, r3, #28
 8002be6:	491b      	ldr	r1, [pc, #108]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bec:	4b1b      	ldr	r3, [pc, #108]	; (8002c5c <HAL_RCC_OscConfig+0x4b4>)
 8002bee:	2201      	movs	r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf2:	f7fe f9c9 	bl	8000f88 <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bf8:	e008      	b.n	8002c0c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bfa:	f7fe f9c5 	bl	8000f88 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e064      	b.n	8002cd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c0c:	4b11      	ldr	r3, [pc, #68]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0f0      	beq.n	8002bfa <HAL_RCC_OscConfig+0x452>
 8002c18:	e05c      	b.n	8002cd4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c1a:	4b10      	ldr	r3, [pc, #64]	; (8002c5c <HAL_RCC_OscConfig+0x4b4>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c20:	f7fe f9b2 	bl	8000f88 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c28:	f7fe f9ae 	bl	8000f88 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e04d      	b.n	8002cd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c3a:	4b06      	ldr	r3, [pc, #24]	; (8002c54 <HAL_RCC_OscConfig+0x4ac>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f0      	bne.n	8002c28 <HAL_RCC_OscConfig+0x480>
 8002c46:	e045      	b.n	8002cd4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d107      	bne.n	8002c60 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e040      	b.n	8002cd6 <HAL_RCC_OscConfig+0x52e>
 8002c54:	40023800 	.word	0x40023800
 8002c58:	40007000 	.word	0x40007000
 8002c5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c60:	4b1f      	ldr	r3, [pc, #124]	; (8002ce0 <HAL_RCC_OscConfig+0x538>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d030      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d129      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d122      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c90:	4013      	ands	r3, r2
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d119      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca6:	085b      	lsrs	r3, r3, #1
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d10f      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d107      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d001      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e000      	b.n	8002cd6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3718      	adds	r7, #24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	40023800 	.word	0x40023800

08002ce4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e03f      	b.n	8002d76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d106      	bne.n	8002d10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7fd ff94 	bl	8000c38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2224      	movs	r2, #36	; 0x24
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68da      	ldr	r2, [r3, #12]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 f929 	bl	8002f80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	691a      	ldr	r2, [r3, #16]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	695a      	ldr	r2, [r3, #20]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68da      	ldr	r2, [r3, #12]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2220      	movs	r2, #32
 8002d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2220      	movs	r2, #32
 8002d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b08a      	sub	sp, #40	; 0x28
 8002d82:	af02      	add	r7, sp, #8
 8002d84:	60f8      	str	r0, [r7, #12]
 8002d86:	60b9      	str	r1, [r7, #8]
 8002d88:	603b      	str	r3, [r7, #0]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b20      	cmp	r3, #32
 8002d9c:	d17c      	bne.n	8002e98 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d002      	beq.n	8002daa <HAL_UART_Transmit+0x2c>
 8002da4:	88fb      	ldrh	r3, [r7, #6]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e075      	b.n	8002e9a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d101      	bne.n	8002dbc <HAL_UART_Transmit+0x3e>
 8002db8:	2302      	movs	r3, #2
 8002dba:	e06e      	b.n	8002e9a <HAL_UART_Transmit+0x11c>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2221      	movs	r2, #33	; 0x21
 8002dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dd2:	f7fe f8d9 	bl	8000f88 <HAL_GetTick>
 8002dd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	88fa      	ldrh	r2, [r7, #6]
 8002ddc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	88fa      	ldrh	r2, [r7, #6]
 8002de2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dec:	d108      	bne.n	8002e00 <HAL_UART_Transmit+0x82>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d104      	bne.n	8002e00 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002df6:	2300      	movs	r3, #0
 8002df8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	61bb      	str	r3, [r7, #24]
 8002dfe:	e003      	b.n	8002e08 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e04:	2300      	movs	r3, #0
 8002e06:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002e10:	e02a      	b.n	8002e68 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	2180      	movs	r1, #128	; 0x80
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f000 f840 	bl	8002ea2 <UART_WaitOnFlagUntilTimeout>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e036      	b.n	8002e9a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10b      	bne.n	8002e4a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	881b      	ldrh	r3, [r3, #0]
 8002e36:	461a      	mov	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	3302      	adds	r3, #2
 8002e46:	61bb      	str	r3, [r7, #24]
 8002e48:	e007      	b.n	8002e5a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	781a      	ldrb	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	3301      	adds	r3, #1
 8002e58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	3b01      	subs	r3, #1
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1cf      	bne.n	8002e12 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	2140      	movs	r1, #64	; 0x40
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f000 f810 	bl	8002ea2 <UART_WaitOnFlagUntilTimeout>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e006      	b.n	8002e9a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002e94:	2300      	movs	r3, #0
 8002e96:	e000      	b.n	8002e9a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002e98:	2302      	movs	r3, #2
  }
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3720      	adds	r7, #32
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b090      	sub	sp, #64	; 0x40
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	60f8      	str	r0, [r7, #12]
 8002eaa:	60b9      	str	r1, [r7, #8]
 8002eac:	603b      	str	r3, [r7, #0]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eb2:	e050      	b.n	8002f56 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eba:	d04c      	beq.n	8002f56 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ebc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d007      	beq.n	8002ed2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ec2:	f7fe f861 	bl	8000f88 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d241      	bcs.n	8002f56 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	330c      	adds	r3, #12
 8002ed8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002edc:	e853 3f00 	ldrex	r3, [r3]
 8002ee0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	330c      	adds	r3, #12
 8002ef0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ef2:	637a      	str	r2, [r7, #52]	; 0x34
 8002ef4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ef8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002efa:	e841 2300 	strex	r3, r2, [r1]
 8002efe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1e5      	bne.n	8002ed2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	3314      	adds	r3, #20
 8002f0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	e853 3f00 	ldrex	r3, [r3]
 8002f14:	613b      	str	r3, [r7, #16]
   return(result);
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	f023 0301 	bic.w	r3, r3, #1
 8002f1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	3314      	adds	r3, #20
 8002f24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f26:	623a      	str	r2, [r7, #32]
 8002f28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f2a:	69f9      	ldr	r1, [r7, #28]
 8002f2c:	6a3a      	ldr	r2, [r7, #32]
 8002f2e:	e841 2300 	strex	r3, r2, [r1]
 8002f32:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1e5      	bne.n	8002f06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2220      	movs	r2, #32
 8002f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e00f      	b.n	8002f76 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	bf0c      	ite	eq
 8002f66:	2301      	moveq	r3, #1
 8002f68:	2300      	movne	r3, #0
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	79fb      	ldrb	r3, [r7, #7]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d09f      	beq.n	8002eb4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3740      	adds	r7, #64	; 0x40
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
	...

08002f80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f84:	b09f      	sub	sp, #124	; 0x7c
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f96:	68d9      	ldr	r1, [r3, #12]
 8002f98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	ea40 0301 	orr.w	r3, r0, r1
 8002fa0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fa4:	689a      	ldr	r2, [r3, #8]
 8002fa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	431a      	orrs	r2, r3
 8002fac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002fc4:	f021 010c 	bic.w	r1, r1, #12
 8002fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fce:	430b      	orrs	r3, r1
 8002fd0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fde:	6999      	ldr	r1, [r3, #24]
 8002fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	ea40 0301 	orr.w	r3, r0, r1
 8002fe8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	4bc5      	ldr	r3, [pc, #788]	; (8003304 <UART_SetConfig+0x384>)
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d004      	beq.n	8002ffe <UART_SetConfig+0x7e>
 8002ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	4bc3      	ldr	r3, [pc, #780]	; (8003308 <UART_SetConfig+0x388>)
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d103      	bne.n	8003006 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ffe:	f7ff fa0d 	bl	800241c <HAL_RCC_GetPCLK2Freq>
 8003002:	6778      	str	r0, [r7, #116]	; 0x74
 8003004:	e002      	b.n	800300c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003006:	f7ff f9f5 	bl	80023f4 <HAL_RCC_GetPCLK1Freq>
 800300a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800300c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003014:	f040 80b6 	bne.w	8003184 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003018:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800301a:	461c      	mov	r4, r3
 800301c:	f04f 0500 	mov.w	r5, #0
 8003020:	4622      	mov	r2, r4
 8003022:	462b      	mov	r3, r5
 8003024:	1891      	adds	r1, r2, r2
 8003026:	6439      	str	r1, [r7, #64]	; 0x40
 8003028:	415b      	adcs	r3, r3
 800302a:	647b      	str	r3, [r7, #68]	; 0x44
 800302c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003030:	1912      	adds	r2, r2, r4
 8003032:	eb45 0303 	adc.w	r3, r5, r3
 8003036:	f04f 0000 	mov.w	r0, #0
 800303a:	f04f 0100 	mov.w	r1, #0
 800303e:	00d9      	lsls	r1, r3, #3
 8003040:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003044:	00d0      	lsls	r0, r2, #3
 8003046:	4602      	mov	r2, r0
 8003048:	460b      	mov	r3, r1
 800304a:	1911      	adds	r1, r2, r4
 800304c:	6639      	str	r1, [r7, #96]	; 0x60
 800304e:	416b      	adcs	r3, r5
 8003050:	667b      	str	r3, [r7, #100]	; 0x64
 8003052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	461a      	mov	r2, r3
 8003058:	f04f 0300 	mov.w	r3, #0
 800305c:	1891      	adds	r1, r2, r2
 800305e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003060:	415b      	adcs	r3, r3
 8003062:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003064:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003068:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800306c:	f7fd f928 	bl	80002c0 <__aeabi_uldivmod>
 8003070:	4602      	mov	r2, r0
 8003072:	460b      	mov	r3, r1
 8003074:	4ba5      	ldr	r3, [pc, #660]	; (800330c <UART_SetConfig+0x38c>)
 8003076:	fba3 2302 	umull	r2, r3, r3, r2
 800307a:	095b      	lsrs	r3, r3, #5
 800307c:	011e      	lsls	r6, r3, #4
 800307e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003080:	461c      	mov	r4, r3
 8003082:	f04f 0500 	mov.w	r5, #0
 8003086:	4622      	mov	r2, r4
 8003088:	462b      	mov	r3, r5
 800308a:	1891      	adds	r1, r2, r2
 800308c:	6339      	str	r1, [r7, #48]	; 0x30
 800308e:	415b      	adcs	r3, r3
 8003090:	637b      	str	r3, [r7, #52]	; 0x34
 8003092:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003096:	1912      	adds	r2, r2, r4
 8003098:	eb45 0303 	adc.w	r3, r5, r3
 800309c:	f04f 0000 	mov.w	r0, #0
 80030a0:	f04f 0100 	mov.w	r1, #0
 80030a4:	00d9      	lsls	r1, r3, #3
 80030a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030aa:	00d0      	lsls	r0, r2, #3
 80030ac:	4602      	mov	r2, r0
 80030ae:	460b      	mov	r3, r1
 80030b0:	1911      	adds	r1, r2, r4
 80030b2:	65b9      	str	r1, [r7, #88]	; 0x58
 80030b4:	416b      	adcs	r3, r5
 80030b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	461a      	mov	r2, r3
 80030be:	f04f 0300 	mov.w	r3, #0
 80030c2:	1891      	adds	r1, r2, r2
 80030c4:	62b9      	str	r1, [r7, #40]	; 0x28
 80030c6:	415b      	adcs	r3, r3
 80030c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030ce:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80030d2:	f7fd f8f5 	bl	80002c0 <__aeabi_uldivmod>
 80030d6:	4602      	mov	r2, r0
 80030d8:	460b      	mov	r3, r1
 80030da:	4b8c      	ldr	r3, [pc, #560]	; (800330c <UART_SetConfig+0x38c>)
 80030dc:	fba3 1302 	umull	r1, r3, r3, r2
 80030e0:	095b      	lsrs	r3, r3, #5
 80030e2:	2164      	movs	r1, #100	; 0x64
 80030e4:	fb01 f303 	mul.w	r3, r1, r3
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	3332      	adds	r3, #50	; 0x32
 80030ee:	4a87      	ldr	r2, [pc, #540]	; (800330c <UART_SetConfig+0x38c>)
 80030f0:	fba2 2303 	umull	r2, r3, r2, r3
 80030f4:	095b      	lsrs	r3, r3, #5
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030fc:	441e      	add	r6, r3
 80030fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003100:	4618      	mov	r0, r3
 8003102:	f04f 0100 	mov.w	r1, #0
 8003106:	4602      	mov	r2, r0
 8003108:	460b      	mov	r3, r1
 800310a:	1894      	adds	r4, r2, r2
 800310c:	623c      	str	r4, [r7, #32]
 800310e:	415b      	adcs	r3, r3
 8003110:	627b      	str	r3, [r7, #36]	; 0x24
 8003112:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003116:	1812      	adds	r2, r2, r0
 8003118:	eb41 0303 	adc.w	r3, r1, r3
 800311c:	f04f 0400 	mov.w	r4, #0
 8003120:	f04f 0500 	mov.w	r5, #0
 8003124:	00dd      	lsls	r5, r3, #3
 8003126:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800312a:	00d4      	lsls	r4, r2, #3
 800312c:	4622      	mov	r2, r4
 800312e:	462b      	mov	r3, r5
 8003130:	1814      	adds	r4, r2, r0
 8003132:	653c      	str	r4, [r7, #80]	; 0x50
 8003134:	414b      	adcs	r3, r1
 8003136:	657b      	str	r3, [r7, #84]	; 0x54
 8003138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	461a      	mov	r2, r3
 800313e:	f04f 0300 	mov.w	r3, #0
 8003142:	1891      	adds	r1, r2, r2
 8003144:	61b9      	str	r1, [r7, #24]
 8003146:	415b      	adcs	r3, r3
 8003148:	61fb      	str	r3, [r7, #28]
 800314a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800314e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003152:	f7fd f8b5 	bl	80002c0 <__aeabi_uldivmod>
 8003156:	4602      	mov	r2, r0
 8003158:	460b      	mov	r3, r1
 800315a:	4b6c      	ldr	r3, [pc, #432]	; (800330c <UART_SetConfig+0x38c>)
 800315c:	fba3 1302 	umull	r1, r3, r3, r2
 8003160:	095b      	lsrs	r3, r3, #5
 8003162:	2164      	movs	r1, #100	; 0x64
 8003164:	fb01 f303 	mul.w	r3, r1, r3
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	3332      	adds	r3, #50	; 0x32
 800316e:	4a67      	ldr	r2, [pc, #412]	; (800330c <UART_SetConfig+0x38c>)
 8003170:	fba2 2303 	umull	r2, r3, r2, r3
 8003174:	095b      	lsrs	r3, r3, #5
 8003176:	f003 0207 	and.w	r2, r3, #7
 800317a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4432      	add	r2, r6
 8003180:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003182:	e0b9      	b.n	80032f8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003184:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003186:	461c      	mov	r4, r3
 8003188:	f04f 0500 	mov.w	r5, #0
 800318c:	4622      	mov	r2, r4
 800318e:	462b      	mov	r3, r5
 8003190:	1891      	adds	r1, r2, r2
 8003192:	6139      	str	r1, [r7, #16]
 8003194:	415b      	adcs	r3, r3
 8003196:	617b      	str	r3, [r7, #20]
 8003198:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800319c:	1912      	adds	r2, r2, r4
 800319e:	eb45 0303 	adc.w	r3, r5, r3
 80031a2:	f04f 0000 	mov.w	r0, #0
 80031a6:	f04f 0100 	mov.w	r1, #0
 80031aa:	00d9      	lsls	r1, r3, #3
 80031ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031b0:	00d0      	lsls	r0, r2, #3
 80031b2:	4602      	mov	r2, r0
 80031b4:	460b      	mov	r3, r1
 80031b6:	eb12 0804 	adds.w	r8, r2, r4
 80031ba:	eb43 0905 	adc.w	r9, r3, r5
 80031be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f04f 0100 	mov.w	r1, #0
 80031c8:	f04f 0200 	mov.w	r2, #0
 80031cc:	f04f 0300 	mov.w	r3, #0
 80031d0:	008b      	lsls	r3, r1, #2
 80031d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80031d6:	0082      	lsls	r2, r0, #2
 80031d8:	4640      	mov	r0, r8
 80031da:	4649      	mov	r1, r9
 80031dc:	f7fd f870 	bl	80002c0 <__aeabi_uldivmod>
 80031e0:	4602      	mov	r2, r0
 80031e2:	460b      	mov	r3, r1
 80031e4:	4b49      	ldr	r3, [pc, #292]	; (800330c <UART_SetConfig+0x38c>)
 80031e6:	fba3 2302 	umull	r2, r3, r3, r2
 80031ea:	095b      	lsrs	r3, r3, #5
 80031ec:	011e      	lsls	r6, r3, #4
 80031ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031f0:	4618      	mov	r0, r3
 80031f2:	f04f 0100 	mov.w	r1, #0
 80031f6:	4602      	mov	r2, r0
 80031f8:	460b      	mov	r3, r1
 80031fa:	1894      	adds	r4, r2, r2
 80031fc:	60bc      	str	r4, [r7, #8]
 80031fe:	415b      	adcs	r3, r3
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003206:	1812      	adds	r2, r2, r0
 8003208:	eb41 0303 	adc.w	r3, r1, r3
 800320c:	f04f 0400 	mov.w	r4, #0
 8003210:	f04f 0500 	mov.w	r5, #0
 8003214:	00dd      	lsls	r5, r3, #3
 8003216:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800321a:	00d4      	lsls	r4, r2, #3
 800321c:	4622      	mov	r2, r4
 800321e:	462b      	mov	r3, r5
 8003220:	1814      	adds	r4, r2, r0
 8003222:	64bc      	str	r4, [r7, #72]	; 0x48
 8003224:	414b      	adcs	r3, r1
 8003226:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	4618      	mov	r0, r3
 800322e:	f04f 0100 	mov.w	r1, #0
 8003232:	f04f 0200 	mov.w	r2, #0
 8003236:	f04f 0300 	mov.w	r3, #0
 800323a:	008b      	lsls	r3, r1, #2
 800323c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003240:	0082      	lsls	r2, r0, #2
 8003242:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003246:	f7fd f83b 	bl	80002c0 <__aeabi_uldivmod>
 800324a:	4602      	mov	r2, r0
 800324c:	460b      	mov	r3, r1
 800324e:	4b2f      	ldr	r3, [pc, #188]	; (800330c <UART_SetConfig+0x38c>)
 8003250:	fba3 1302 	umull	r1, r3, r3, r2
 8003254:	095b      	lsrs	r3, r3, #5
 8003256:	2164      	movs	r1, #100	; 0x64
 8003258:	fb01 f303 	mul.w	r3, r1, r3
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	011b      	lsls	r3, r3, #4
 8003260:	3332      	adds	r3, #50	; 0x32
 8003262:	4a2a      	ldr	r2, [pc, #168]	; (800330c <UART_SetConfig+0x38c>)
 8003264:	fba2 2303 	umull	r2, r3, r2, r3
 8003268:	095b      	lsrs	r3, r3, #5
 800326a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800326e:	441e      	add	r6, r3
 8003270:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003272:	4618      	mov	r0, r3
 8003274:	f04f 0100 	mov.w	r1, #0
 8003278:	4602      	mov	r2, r0
 800327a:	460b      	mov	r3, r1
 800327c:	1894      	adds	r4, r2, r2
 800327e:	603c      	str	r4, [r7, #0]
 8003280:	415b      	adcs	r3, r3
 8003282:	607b      	str	r3, [r7, #4]
 8003284:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003288:	1812      	adds	r2, r2, r0
 800328a:	eb41 0303 	adc.w	r3, r1, r3
 800328e:	f04f 0400 	mov.w	r4, #0
 8003292:	f04f 0500 	mov.w	r5, #0
 8003296:	00dd      	lsls	r5, r3, #3
 8003298:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800329c:	00d4      	lsls	r4, r2, #3
 800329e:	4622      	mov	r2, r4
 80032a0:	462b      	mov	r3, r5
 80032a2:	eb12 0a00 	adds.w	sl, r2, r0
 80032a6:	eb43 0b01 	adc.w	fp, r3, r1
 80032aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f04f 0100 	mov.w	r1, #0
 80032b4:	f04f 0200 	mov.w	r2, #0
 80032b8:	f04f 0300 	mov.w	r3, #0
 80032bc:	008b      	lsls	r3, r1, #2
 80032be:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80032c2:	0082      	lsls	r2, r0, #2
 80032c4:	4650      	mov	r0, sl
 80032c6:	4659      	mov	r1, fp
 80032c8:	f7fc fffa 	bl	80002c0 <__aeabi_uldivmod>
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	4b0e      	ldr	r3, [pc, #56]	; (800330c <UART_SetConfig+0x38c>)
 80032d2:	fba3 1302 	umull	r1, r3, r3, r2
 80032d6:	095b      	lsrs	r3, r3, #5
 80032d8:	2164      	movs	r1, #100	; 0x64
 80032da:	fb01 f303 	mul.w	r3, r1, r3
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	3332      	adds	r3, #50	; 0x32
 80032e4:	4a09      	ldr	r2, [pc, #36]	; (800330c <UART_SetConfig+0x38c>)
 80032e6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ea:	095b      	lsrs	r3, r3, #5
 80032ec:	f003 020f 	and.w	r2, r3, #15
 80032f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4432      	add	r2, r6
 80032f6:	609a      	str	r2, [r3, #8]
}
 80032f8:	bf00      	nop
 80032fa:	377c      	adds	r7, #124	; 0x7c
 80032fc:	46bd      	mov	sp, r7
 80032fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003302:	bf00      	nop
 8003304:	40011000 	.word	0x40011000
 8003308:	40011400 	.word	0x40011400
 800330c:	51eb851f 	.word	0x51eb851f

08003310 <__errno>:
 8003310:	4b01      	ldr	r3, [pc, #4]	; (8003318 <__errno+0x8>)
 8003312:	6818      	ldr	r0, [r3, #0]
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	2000000c 	.word	0x2000000c

0800331c <__libc_init_array>:
 800331c:	b570      	push	{r4, r5, r6, lr}
 800331e:	4d0d      	ldr	r5, [pc, #52]	; (8003354 <__libc_init_array+0x38>)
 8003320:	4c0d      	ldr	r4, [pc, #52]	; (8003358 <__libc_init_array+0x3c>)
 8003322:	1b64      	subs	r4, r4, r5
 8003324:	10a4      	asrs	r4, r4, #2
 8003326:	2600      	movs	r6, #0
 8003328:	42a6      	cmp	r6, r4
 800332a:	d109      	bne.n	8003340 <__libc_init_array+0x24>
 800332c:	4d0b      	ldr	r5, [pc, #44]	; (800335c <__libc_init_array+0x40>)
 800332e:	4c0c      	ldr	r4, [pc, #48]	; (8003360 <__libc_init_array+0x44>)
 8003330:	f000 fc4e 	bl	8003bd0 <_init>
 8003334:	1b64      	subs	r4, r4, r5
 8003336:	10a4      	asrs	r4, r4, #2
 8003338:	2600      	movs	r6, #0
 800333a:	42a6      	cmp	r6, r4
 800333c:	d105      	bne.n	800334a <__libc_init_array+0x2e>
 800333e:	bd70      	pop	{r4, r5, r6, pc}
 8003340:	f855 3b04 	ldr.w	r3, [r5], #4
 8003344:	4798      	blx	r3
 8003346:	3601      	adds	r6, #1
 8003348:	e7ee      	b.n	8003328 <__libc_init_array+0xc>
 800334a:	f855 3b04 	ldr.w	r3, [r5], #4
 800334e:	4798      	blx	r3
 8003350:	3601      	adds	r6, #1
 8003352:	e7f2      	b.n	800333a <__libc_init_array+0x1e>
 8003354:	08003cf0 	.word	0x08003cf0
 8003358:	08003cf0 	.word	0x08003cf0
 800335c:	08003cf0 	.word	0x08003cf0
 8003360:	08003cf4 	.word	0x08003cf4

08003364 <memset>:
 8003364:	4402      	add	r2, r0
 8003366:	4603      	mov	r3, r0
 8003368:	4293      	cmp	r3, r2
 800336a:	d100      	bne.n	800336e <memset+0xa>
 800336c:	4770      	bx	lr
 800336e:	f803 1b01 	strb.w	r1, [r3], #1
 8003372:	e7f9      	b.n	8003368 <memset+0x4>

08003374 <siprintf>:
 8003374:	b40e      	push	{r1, r2, r3}
 8003376:	b500      	push	{lr}
 8003378:	b09c      	sub	sp, #112	; 0x70
 800337a:	ab1d      	add	r3, sp, #116	; 0x74
 800337c:	9002      	str	r0, [sp, #8]
 800337e:	9006      	str	r0, [sp, #24]
 8003380:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003384:	4809      	ldr	r0, [pc, #36]	; (80033ac <siprintf+0x38>)
 8003386:	9107      	str	r1, [sp, #28]
 8003388:	9104      	str	r1, [sp, #16]
 800338a:	4909      	ldr	r1, [pc, #36]	; (80033b0 <siprintf+0x3c>)
 800338c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003390:	9105      	str	r1, [sp, #20]
 8003392:	6800      	ldr	r0, [r0, #0]
 8003394:	9301      	str	r3, [sp, #4]
 8003396:	a902      	add	r1, sp, #8
 8003398:	f000 f868 	bl	800346c <_svfiprintf_r>
 800339c:	9b02      	ldr	r3, [sp, #8]
 800339e:	2200      	movs	r2, #0
 80033a0:	701a      	strb	r2, [r3, #0]
 80033a2:	b01c      	add	sp, #112	; 0x70
 80033a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80033a8:	b003      	add	sp, #12
 80033aa:	4770      	bx	lr
 80033ac:	2000000c 	.word	0x2000000c
 80033b0:	ffff0208 	.word	0xffff0208

080033b4 <__ssputs_r>:
 80033b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033b8:	688e      	ldr	r6, [r1, #8]
 80033ba:	429e      	cmp	r6, r3
 80033bc:	4682      	mov	sl, r0
 80033be:	460c      	mov	r4, r1
 80033c0:	4690      	mov	r8, r2
 80033c2:	461f      	mov	r7, r3
 80033c4:	d838      	bhi.n	8003438 <__ssputs_r+0x84>
 80033c6:	898a      	ldrh	r2, [r1, #12]
 80033c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80033cc:	d032      	beq.n	8003434 <__ssputs_r+0x80>
 80033ce:	6825      	ldr	r5, [r4, #0]
 80033d0:	6909      	ldr	r1, [r1, #16]
 80033d2:	eba5 0901 	sub.w	r9, r5, r1
 80033d6:	6965      	ldr	r5, [r4, #20]
 80033d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80033dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80033e0:	3301      	adds	r3, #1
 80033e2:	444b      	add	r3, r9
 80033e4:	106d      	asrs	r5, r5, #1
 80033e6:	429d      	cmp	r5, r3
 80033e8:	bf38      	it	cc
 80033ea:	461d      	movcc	r5, r3
 80033ec:	0553      	lsls	r3, r2, #21
 80033ee:	d531      	bpl.n	8003454 <__ssputs_r+0xa0>
 80033f0:	4629      	mov	r1, r5
 80033f2:	f000 fb47 	bl	8003a84 <_malloc_r>
 80033f6:	4606      	mov	r6, r0
 80033f8:	b950      	cbnz	r0, 8003410 <__ssputs_r+0x5c>
 80033fa:	230c      	movs	r3, #12
 80033fc:	f8ca 3000 	str.w	r3, [sl]
 8003400:	89a3      	ldrh	r3, [r4, #12]
 8003402:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003406:	81a3      	strh	r3, [r4, #12]
 8003408:	f04f 30ff 	mov.w	r0, #4294967295
 800340c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003410:	6921      	ldr	r1, [r4, #16]
 8003412:	464a      	mov	r2, r9
 8003414:	f000 fabe 	bl	8003994 <memcpy>
 8003418:	89a3      	ldrh	r3, [r4, #12]
 800341a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800341e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003422:	81a3      	strh	r3, [r4, #12]
 8003424:	6126      	str	r6, [r4, #16]
 8003426:	6165      	str	r5, [r4, #20]
 8003428:	444e      	add	r6, r9
 800342a:	eba5 0509 	sub.w	r5, r5, r9
 800342e:	6026      	str	r6, [r4, #0]
 8003430:	60a5      	str	r5, [r4, #8]
 8003432:	463e      	mov	r6, r7
 8003434:	42be      	cmp	r6, r7
 8003436:	d900      	bls.n	800343a <__ssputs_r+0x86>
 8003438:	463e      	mov	r6, r7
 800343a:	4632      	mov	r2, r6
 800343c:	6820      	ldr	r0, [r4, #0]
 800343e:	4641      	mov	r1, r8
 8003440:	f000 fab6 	bl	80039b0 <memmove>
 8003444:	68a3      	ldr	r3, [r4, #8]
 8003446:	6822      	ldr	r2, [r4, #0]
 8003448:	1b9b      	subs	r3, r3, r6
 800344a:	4432      	add	r2, r6
 800344c:	60a3      	str	r3, [r4, #8]
 800344e:	6022      	str	r2, [r4, #0]
 8003450:	2000      	movs	r0, #0
 8003452:	e7db      	b.n	800340c <__ssputs_r+0x58>
 8003454:	462a      	mov	r2, r5
 8003456:	f000 fb6f 	bl	8003b38 <_realloc_r>
 800345a:	4606      	mov	r6, r0
 800345c:	2800      	cmp	r0, #0
 800345e:	d1e1      	bne.n	8003424 <__ssputs_r+0x70>
 8003460:	6921      	ldr	r1, [r4, #16]
 8003462:	4650      	mov	r0, sl
 8003464:	f000 fabe 	bl	80039e4 <_free_r>
 8003468:	e7c7      	b.n	80033fa <__ssputs_r+0x46>
	...

0800346c <_svfiprintf_r>:
 800346c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003470:	4698      	mov	r8, r3
 8003472:	898b      	ldrh	r3, [r1, #12]
 8003474:	061b      	lsls	r3, r3, #24
 8003476:	b09d      	sub	sp, #116	; 0x74
 8003478:	4607      	mov	r7, r0
 800347a:	460d      	mov	r5, r1
 800347c:	4614      	mov	r4, r2
 800347e:	d50e      	bpl.n	800349e <_svfiprintf_r+0x32>
 8003480:	690b      	ldr	r3, [r1, #16]
 8003482:	b963      	cbnz	r3, 800349e <_svfiprintf_r+0x32>
 8003484:	2140      	movs	r1, #64	; 0x40
 8003486:	f000 fafd 	bl	8003a84 <_malloc_r>
 800348a:	6028      	str	r0, [r5, #0]
 800348c:	6128      	str	r0, [r5, #16]
 800348e:	b920      	cbnz	r0, 800349a <_svfiprintf_r+0x2e>
 8003490:	230c      	movs	r3, #12
 8003492:	603b      	str	r3, [r7, #0]
 8003494:	f04f 30ff 	mov.w	r0, #4294967295
 8003498:	e0d1      	b.n	800363e <_svfiprintf_r+0x1d2>
 800349a:	2340      	movs	r3, #64	; 0x40
 800349c:	616b      	str	r3, [r5, #20]
 800349e:	2300      	movs	r3, #0
 80034a0:	9309      	str	r3, [sp, #36]	; 0x24
 80034a2:	2320      	movs	r3, #32
 80034a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80034a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80034ac:	2330      	movs	r3, #48	; 0x30
 80034ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003658 <_svfiprintf_r+0x1ec>
 80034b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80034b6:	f04f 0901 	mov.w	r9, #1
 80034ba:	4623      	mov	r3, r4
 80034bc:	469a      	mov	sl, r3
 80034be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034c2:	b10a      	cbz	r2, 80034c8 <_svfiprintf_r+0x5c>
 80034c4:	2a25      	cmp	r2, #37	; 0x25
 80034c6:	d1f9      	bne.n	80034bc <_svfiprintf_r+0x50>
 80034c8:	ebba 0b04 	subs.w	fp, sl, r4
 80034cc:	d00b      	beq.n	80034e6 <_svfiprintf_r+0x7a>
 80034ce:	465b      	mov	r3, fp
 80034d0:	4622      	mov	r2, r4
 80034d2:	4629      	mov	r1, r5
 80034d4:	4638      	mov	r0, r7
 80034d6:	f7ff ff6d 	bl	80033b4 <__ssputs_r>
 80034da:	3001      	adds	r0, #1
 80034dc:	f000 80aa 	beq.w	8003634 <_svfiprintf_r+0x1c8>
 80034e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80034e2:	445a      	add	r2, fp
 80034e4:	9209      	str	r2, [sp, #36]	; 0x24
 80034e6:	f89a 3000 	ldrb.w	r3, [sl]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 80a2 	beq.w	8003634 <_svfiprintf_r+0x1c8>
 80034f0:	2300      	movs	r3, #0
 80034f2:	f04f 32ff 	mov.w	r2, #4294967295
 80034f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034fa:	f10a 0a01 	add.w	sl, sl, #1
 80034fe:	9304      	str	r3, [sp, #16]
 8003500:	9307      	str	r3, [sp, #28]
 8003502:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003506:	931a      	str	r3, [sp, #104]	; 0x68
 8003508:	4654      	mov	r4, sl
 800350a:	2205      	movs	r2, #5
 800350c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003510:	4851      	ldr	r0, [pc, #324]	; (8003658 <_svfiprintf_r+0x1ec>)
 8003512:	f7fc fe85 	bl	8000220 <memchr>
 8003516:	9a04      	ldr	r2, [sp, #16]
 8003518:	b9d8      	cbnz	r0, 8003552 <_svfiprintf_r+0xe6>
 800351a:	06d0      	lsls	r0, r2, #27
 800351c:	bf44      	itt	mi
 800351e:	2320      	movmi	r3, #32
 8003520:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003524:	0711      	lsls	r1, r2, #28
 8003526:	bf44      	itt	mi
 8003528:	232b      	movmi	r3, #43	; 0x2b
 800352a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800352e:	f89a 3000 	ldrb.w	r3, [sl]
 8003532:	2b2a      	cmp	r3, #42	; 0x2a
 8003534:	d015      	beq.n	8003562 <_svfiprintf_r+0xf6>
 8003536:	9a07      	ldr	r2, [sp, #28]
 8003538:	4654      	mov	r4, sl
 800353a:	2000      	movs	r0, #0
 800353c:	f04f 0c0a 	mov.w	ip, #10
 8003540:	4621      	mov	r1, r4
 8003542:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003546:	3b30      	subs	r3, #48	; 0x30
 8003548:	2b09      	cmp	r3, #9
 800354a:	d94e      	bls.n	80035ea <_svfiprintf_r+0x17e>
 800354c:	b1b0      	cbz	r0, 800357c <_svfiprintf_r+0x110>
 800354e:	9207      	str	r2, [sp, #28]
 8003550:	e014      	b.n	800357c <_svfiprintf_r+0x110>
 8003552:	eba0 0308 	sub.w	r3, r0, r8
 8003556:	fa09 f303 	lsl.w	r3, r9, r3
 800355a:	4313      	orrs	r3, r2
 800355c:	9304      	str	r3, [sp, #16]
 800355e:	46a2      	mov	sl, r4
 8003560:	e7d2      	b.n	8003508 <_svfiprintf_r+0x9c>
 8003562:	9b03      	ldr	r3, [sp, #12]
 8003564:	1d19      	adds	r1, r3, #4
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	9103      	str	r1, [sp, #12]
 800356a:	2b00      	cmp	r3, #0
 800356c:	bfbb      	ittet	lt
 800356e:	425b      	neglt	r3, r3
 8003570:	f042 0202 	orrlt.w	r2, r2, #2
 8003574:	9307      	strge	r3, [sp, #28]
 8003576:	9307      	strlt	r3, [sp, #28]
 8003578:	bfb8      	it	lt
 800357a:	9204      	strlt	r2, [sp, #16]
 800357c:	7823      	ldrb	r3, [r4, #0]
 800357e:	2b2e      	cmp	r3, #46	; 0x2e
 8003580:	d10c      	bne.n	800359c <_svfiprintf_r+0x130>
 8003582:	7863      	ldrb	r3, [r4, #1]
 8003584:	2b2a      	cmp	r3, #42	; 0x2a
 8003586:	d135      	bne.n	80035f4 <_svfiprintf_r+0x188>
 8003588:	9b03      	ldr	r3, [sp, #12]
 800358a:	1d1a      	adds	r2, r3, #4
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	9203      	str	r2, [sp, #12]
 8003590:	2b00      	cmp	r3, #0
 8003592:	bfb8      	it	lt
 8003594:	f04f 33ff 	movlt.w	r3, #4294967295
 8003598:	3402      	adds	r4, #2
 800359a:	9305      	str	r3, [sp, #20]
 800359c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003668 <_svfiprintf_r+0x1fc>
 80035a0:	7821      	ldrb	r1, [r4, #0]
 80035a2:	2203      	movs	r2, #3
 80035a4:	4650      	mov	r0, sl
 80035a6:	f7fc fe3b 	bl	8000220 <memchr>
 80035aa:	b140      	cbz	r0, 80035be <_svfiprintf_r+0x152>
 80035ac:	2340      	movs	r3, #64	; 0x40
 80035ae:	eba0 000a 	sub.w	r0, r0, sl
 80035b2:	fa03 f000 	lsl.w	r0, r3, r0
 80035b6:	9b04      	ldr	r3, [sp, #16]
 80035b8:	4303      	orrs	r3, r0
 80035ba:	3401      	adds	r4, #1
 80035bc:	9304      	str	r3, [sp, #16]
 80035be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035c2:	4826      	ldr	r0, [pc, #152]	; (800365c <_svfiprintf_r+0x1f0>)
 80035c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80035c8:	2206      	movs	r2, #6
 80035ca:	f7fc fe29 	bl	8000220 <memchr>
 80035ce:	2800      	cmp	r0, #0
 80035d0:	d038      	beq.n	8003644 <_svfiprintf_r+0x1d8>
 80035d2:	4b23      	ldr	r3, [pc, #140]	; (8003660 <_svfiprintf_r+0x1f4>)
 80035d4:	bb1b      	cbnz	r3, 800361e <_svfiprintf_r+0x1b2>
 80035d6:	9b03      	ldr	r3, [sp, #12]
 80035d8:	3307      	adds	r3, #7
 80035da:	f023 0307 	bic.w	r3, r3, #7
 80035de:	3308      	adds	r3, #8
 80035e0:	9303      	str	r3, [sp, #12]
 80035e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035e4:	4433      	add	r3, r6
 80035e6:	9309      	str	r3, [sp, #36]	; 0x24
 80035e8:	e767      	b.n	80034ba <_svfiprintf_r+0x4e>
 80035ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80035ee:	460c      	mov	r4, r1
 80035f0:	2001      	movs	r0, #1
 80035f2:	e7a5      	b.n	8003540 <_svfiprintf_r+0xd4>
 80035f4:	2300      	movs	r3, #0
 80035f6:	3401      	adds	r4, #1
 80035f8:	9305      	str	r3, [sp, #20]
 80035fa:	4619      	mov	r1, r3
 80035fc:	f04f 0c0a 	mov.w	ip, #10
 8003600:	4620      	mov	r0, r4
 8003602:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003606:	3a30      	subs	r2, #48	; 0x30
 8003608:	2a09      	cmp	r2, #9
 800360a:	d903      	bls.n	8003614 <_svfiprintf_r+0x1a8>
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0c5      	beq.n	800359c <_svfiprintf_r+0x130>
 8003610:	9105      	str	r1, [sp, #20]
 8003612:	e7c3      	b.n	800359c <_svfiprintf_r+0x130>
 8003614:	fb0c 2101 	mla	r1, ip, r1, r2
 8003618:	4604      	mov	r4, r0
 800361a:	2301      	movs	r3, #1
 800361c:	e7f0      	b.n	8003600 <_svfiprintf_r+0x194>
 800361e:	ab03      	add	r3, sp, #12
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	462a      	mov	r2, r5
 8003624:	4b0f      	ldr	r3, [pc, #60]	; (8003664 <_svfiprintf_r+0x1f8>)
 8003626:	a904      	add	r1, sp, #16
 8003628:	4638      	mov	r0, r7
 800362a:	f3af 8000 	nop.w
 800362e:	1c42      	adds	r2, r0, #1
 8003630:	4606      	mov	r6, r0
 8003632:	d1d6      	bne.n	80035e2 <_svfiprintf_r+0x176>
 8003634:	89ab      	ldrh	r3, [r5, #12]
 8003636:	065b      	lsls	r3, r3, #25
 8003638:	f53f af2c 	bmi.w	8003494 <_svfiprintf_r+0x28>
 800363c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800363e:	b01d      	add	sp, #116	; 0x74
 8003640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003644:	ab03      	add	r3, sp, #12
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	462a      	mov	r2, r5
 800364a:	4b06      	ldr	r3, [pc, #24]	; (8003664 <_svfiprintf_r+0x1f8>)
 800364c:	a904      	add	r1, sp, #16
 800364e:	4638      	mov	r0, r7
 8003650:	f000 f87a 	bl	8003748 <_printf_i>
 8003654:	e7eb      	b.n	800362e <_svfiprintf_r+0x1c2>
 8003656:	bf00      	nop
 8003658:	08003cb4 	.word	0x08003cb4
 800365c:	08003cbe 	.word	0x08003cbe
 8003660:	00000000 	.word	0x00000000
 8003664:	080033b5 	.word	0x080033b5
 8003668:	08003cba 	.word	0x08003cba

0800366c <_printf_common>:
 800366c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003670:	4616      	mov	r6, r2
 8003672:	4699      	mov	r9, r3
 8003674:	688a      	ldr	r2, [r1, #8]
 8003676:	690b      	ldr	r3, [r1, #16]
 8003678:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800367c:	4293      	cmp	r3, r2
 800367e:	bfb8      	it	lt
 8003680:	4613      	movlt	r3, r2
 8003682:	6033      	str	r3, [r6, #0]
 8003684:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003688:	4607      	mov	r7, r0
 800368a:	460c      	mov	r4, r1
 800368c:	b10a      	cbz	r2, 8003692 <_printf_common+0x26>
 800368e:	3301      	adds	r3, #1
 8003690:	6033      	str	r3, [r6, #0]
 8003692:	6823      	ldr	r3, [r4, #0]
 8003694:	0699      	lsls	r1, r3, #26
 8003696:	bf42      	ittt	mi
 8003698:	6833      	ldrmi	r3, [r6, #0]
 800369a:	3302      	addmi	r3, #2
 800369c:	6033      	strmi	r3, [r6, #0]
 800369e:	6825      	ldr	r5, [r4, #0]
 80036a0:	f015 0506 	ands.w	r5, r5, #6
 80036a4:	d106      	bne.n	80036b4 <_printf_common+0x48>
 80036a6:	f104 0a19 	add.w	sl, r4, #25
 80036aa:	68e3      	ldr	r3, [r4, #12]
 80036ac:	6832      	ldr	r2, [r6, #0]
 80036ae:	1a9b      	subs	r3, r3, r2
 80036b0:	42ab      	cmp	r3, r5
 80036b2:	dc26      	bgt.n	8003702 <_printf_common+0x96>
 80036b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80036b8:	1e13      	subs	r3, r2, #0
 80036ba:	6822      	ldr	r2, [r4, #0]
 80036bc:	bf18      	it	ne
 80036be:	2301      	movne	r3, #1
 80036c0:	0692      	lsls	r2, r2, #26
 80036c2:	d42b      	bmi.n	800371c <_printf_common+0xb0>
 80036c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036c8:	4649      	mov	r1, r9
 80036ca:	4638      	mov	r0, r7
 80036cc:	47c0      	blx	r8
 80036ce:	3001      	adds	r0, #1
 80036d0:	d01e      	beq.n	8003710 <_printf_common+0xa4>
 80036d2:	6823      	ldr	r3, [r4, #0]
 80036d4:	68e5      	ldr	r5, [r4, #12]
 80036d6:	6832      	ldr	r2, [r6, #0]
 80036d8:	f003 0306 	and.w	r3, r3, #6
 80036dc:	2b04      	cmp	r3, #4
 80036de:	bf08      	it	eq
 80036e0:	1aad      	subeq	r5, r5, r2
 80036e2:	68a3      	ldr	r3, [r4, #8]
 80036e4:	6922      	ldr	r2, [r4, #16]
 80036e6:	bf0c      	ite	eq
 80036e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036ec:	2500      	movne	r5, #0
 80036ee:	4293      	cmp	r3, r2
 80036f0:	bfc4      	itt	gt
 80036f2:	1a9b      	subgt	r3, r3, r2
 80036f4:	18ed      	addgt	r5, r5, r3
 80036f6:	2600      	movs	r6, #0
 80036f8:	341a      	adds	r4, #26
 80036fa:	42b5      	cmp	r5, r6
 80036fc:	d11a      	bne.n	8003734 <_printf_common+0xc8>
 80036fe:	2000      	movs	r0, #0
 8003700:	e008      	b.n	8003714 <_printf_common+0xa8>
 8003702:	2301      	movs	r3, #1
 8003704:	4652      	mov	r2, sl
 8003706:	4649      	mov	r1, r9
 8003708:	4638      	mov	r0, r7
 800370a:	47c0      	blx	r8
 800370c:	3001      	adds	r0, #1
 800370e:	d103      	bne.n	8003718 <_printf_common+0xac>
 8003710:	f04f 30ff 	mov.w	r0, #4294967295
 8003714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003718:	3501      	adds	r5, #1
 800371a:	e7c6      	b.n	80036aa <_printf_common+0x3e>
 800371c:	18e1      	adds	r1, r4, r3
 800371e:	1c5a      	adds	r2, r3, #1
 8003720:	2030      	movs	r0, #48	; 0x30
 8003722:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003726:	4422      	add	r2, r4
 8003728:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800372c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003730:	3302      	adds	r3, #2
 8003732:	e7c7      	b.n	80036c4 <_printf_common+0x58>
 8003734:	2301      	movs	r3, #1
 8003736:	4622      	mov	r2, r4
 8003738:	4649      	mov	r1, r9
 800373a:	4638      	mov	r0, r7
 800373c:	47c0      	blx	r8
 800373e:	3001      	adds	r0, #1
 8003740:	d0e6      	beq.n	8003710 <_printf_common+0xa4>
 8003742:	3601      	adds	r6, #1
 8003744:	e7d9      	b.n	80036fa <_printf_common+0x8e>
	...

08003748 <_printf_i>:
 8003748:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800374c:	460c      	mov	r4, r1
 800374e:	4691      	mov	r9, r2
 8003750:	7e27      	ldrb	r7, [r4, #24]
 8003752:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003754:	2f78      	cmp	r7, #120	; 0x78
 8003756:	4680      	mov	r8, r0
 8003758:	469a      	mov	sl, r3
 800375a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800375e:	d807      	bhi.n	8003770 <_printf_i+0x28>
 8003760:	2f62      	cmp	r7, #98	; 0x62
 8003762:	d80a      	bhi.n	800377a <_printf_i+0x32>
 8003764:	2f00      	cmp	r7, #0
 8003766:	f000 80d8 	beq.w	800391a <_printf_i+0x1d2>
 800376a:	2f58      	cmp	r7, #88	; 0x58
 800376c:	f000 80a3 	beq.w	80038b6 <_printf_i+0x16e>
 8003770:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003774:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003778:	e03a      	b.n	80037f0 <_printf_i+0xa8>
 800377a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800377e:	2b15      	cmp	r3, #21
 8003780:	d8f6      	bhi.n	8003770 <_printf_i+0x28>
 8003782:	a001      	add	r0, pc, #4	; (adr r0, 8003788 <_printf_i+0x40>)
 8003784:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003788:	080037e1 	.word	0x080037e1
 800378c:	080037f5 	.word	0x080037f5
 8003790:	08003771 	.word	0x08003771
 8003794:	08003771 	.word	0x08003771
 8003798:	08003771 	.word	0x08003771
 800379c:	08003771 	.word	0x08003771
 80037a0:	080037f5 	.word	0x080037f5
 80037a4:	08003771 	.word	0x08003771
 80037a8:	08003771 	.word	0x08003771
 80037ac:	08003771 	.word	0x08003771
 80037b0:	08003771 	.word	0x08003771
 80037b4:	08003901 	.word	0x08003901
 80037b8:	08003825 	.word	0x08003825
 80037bc:	080038e3 	.word	0x080038e3
 80037c0:	08003771 	.word	0x08003771
 80037c4:	08003771 	.word	0x08003771
 80037c8:	08003923 	.word	0x08003923
 80037cc:	08003771 	.word	0x08003771
 80037d0:	08003825 	.word	0x08003825
 80037d4:	08003771 	.word	0x08003771
 80037d8:	08003771 	.word	0x08003771
 80037dc:	080038eb 	.word	0x080038eb
 80037e0:	680b      	ldr	r3, [r1, #0]
 80037e2:	1d1a      	adds	r2, r3, #4
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	600a      	str	r2, [r1, #0]
 80037e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80037ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037f0:	2301      	movs	r3, #1
 80037f2:	e0a3      	b.n	800393c <_printf_i+0x1f4>
 80037f4:	6825      	ldr	r5, [r4, #0]
 80037f6:	6808      	ldr	r0, [r1, #0]
 80037f8:	062e      	lsls	r6, r5, #24
 80037fa:	f100 0304 	add.w	r3, r0, #4
 80037fe:	d50a      	bpl.n	8003816 <_printf_i+0xce>
 8003800:	6805      	ldr	r5, [r0, #0]
 8003802:	600b      	str	r3, [r1, #0]
 8003804:	2d00      	cmp	r5, #0
 8003806:	da03      	bge.n	8003810 <_printf_i+0xc8>
 8003808:	232d      	movs	r3, #45	; 0x2d
 800380a:	426d      	negs	r5, r5
 800380c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003810:	485e      	ldr	r0, [pc, #376]	; (800398c <_printf_i+0x244>)
 8003812:	230a      	movs	r3, #10
 8003814:	e019      	b.n	800384a <_printf_i+0x102>
 8003816:	f015 0f40 	tst.w	r5, #64	; 0x40
 800381a:	6805      	ldr	r5, [r0, #0]
 800381c:	600b      	str	r3, [r1, #0]
 800381e:	bf18      	it	ne
 8003820:	b22d      	sxthne	r5, r5
 8003822:	e7ef      	b.n	8003804 <_printf_i+0xbc>
 8003824:	680b      	ldr	r3, [r1, #0]
 8003826:	6825      	ldr	r5, [r4, #0]
 8003828:	1d18      	adds	r0, r3, #4
 800382a:	6008      	str	r0, [r1, #0]
 800382c:	0628      	lsls	r0, r5, #24
 800382e:	d501      	bpl.n	8003834 <_printf_i+0xec>
 8003830:	681d      	ldr	r5, [r3, #0]
 8003832:	e002      	b.n	800383a <_printf_i+0xf2>
 8003834:	0669      	lsls	r1, r5, #25
 8003836:	d5fb      	bpl.n	8003830 <_printf_i+0xe8>
 8003838:	881d      	ldrh	r5, [r3, #0]
 800383a:	4854      	ldr	r0, [pc, #336]	; (800398c <_printf_i+0x244>)
 800383c:	2f6f      	cmp	r7, #111	; 0x6f
 800383e:	bf0c      	ite	eq
 8003840:	2308      	moveq	r3, #8
 8003842:	230a      	movne	r3, #10
 8003844:	2100      	movs	r1, #0
 8003846:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800384a:	6866      	ldr	r6, [r4, #4]
 800384c:	60a6      	str	r6, [r4, #8]
 800384e:	2e00      	cmp	r6, #0
 8003850:	bfa2      	ittt	ge
 8003852:	6821      	ldrge	r1, [r4, #0]
 8003854:	f021 0104 	bicge.w	r1, r1, #4
 8003858:	6021      	strge	r1, [r4, #0]
 800385a:	b90d      	cbnz	r5, 8003860 <_printf_i+0x118>
 800385c:	2e00      	cmp	r6, #0
 800385e:	d04d      	beq.n	80038fc <_printf_i+0x1b4>
 8003860:	4616      	mov	r6, r2
 8003862:	fbb5 f1f3 	udiv	r1, r5, r3
 8003866:	fb03 5711 	mls	r7, r3, r1, r5
 800386a:	5dc7      	ldrb	r7, [r0, r7]
 800386c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003870:	462f      	mov	r7, r5
 8003872:	42bb      	cmp	r3, r7
 8003874:	460d      	mov	r5, r1
 8003876:	d9f4      	bls.n	8003862 <_printf_i+0x11a>
 8003878:	2b08      	cmp	r3, #8
 800387a:	d10b      	bne.n	8003894 <_printf_i+0x14c>
 800387c:	6823      	ldr	r3, [r4, #0]
 800387e:	07df      	lsls	r7, r3, #31
 8003880:	d508      	bpl.n	8003894 <_printf_i+0x14c>
 8003882:	6923      	ldr	r3, [r4, #16]
 8003884:	6861      	ldr	r1, [r4, #4]
 8003886:	4299      	cmp	r1, r3
 8003888:	bfde      	ittt	le
 800388a:	2330      	movle	r3, #48	; 0x30
 800388c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003890:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003894:	1b92      	subs	r2, r2, r6
 8003896:	6122      	str	r2, [r4, #16]
 8003898:	f8cd a000 	str.w	sl, [sp]
 800389c:	464b      	mov	r3, r9
 800389e:	aa03      	add	r2, sp, #12
 80038a0:	4621      	mov	r1, r4
 80038a2:	4640      	mov	r0, r8
 80038a4:	f7ff fee2 	bl	800366c <_printf_common>
 80038a8:	3001      	adds	r0, #1
 80038aa:	d14c      	bne.n	8003946 <_printf_i+0x1fe>
 80038ac:	f04f 30ff 	mov.w	r0, #4294967295
 80038b0:	b004      	add	sp, #16
 80038b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038b6:	4835      	ldr	r0, [pc, #212]	; (800398c <_printf_i+0x244>)
 80038b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80038bc:	6823      	ldr	r3, [r4, #0]
 80038be:	680e      	ldr	r6, [r1, #0]
 80038c0:	061f      	lsls	r7, r3, #24
 80038c2:	f856 5b04 	ldr.w	r5, [r6], #4
 80038c6:	600e      	str	r6, [r1, #0]
 80038c8:	d514      	bpl.n	80038f4 <_printf_i+0x1ac>
 80038ca:	07d9      	lsls	r1, r3, #31
 80038cc:	bf44      	itt	mi
 80038ce:	f043 0320 	orrmi.w	r3, r3, #32
 80038d2:	6023      	strmi	r3, [r4, #0]
 80038d4:	b91d      	cbnz	r5, 80038de <_printf_i+0x196>
 80038d6:	6823      	ldr	r3, [r4, #0]
 80038d8:	f023 0320 	bic.w	r3, r3, #32
 80038dc:	6023      	str	r3, [r4, #0]
 80038de:	2310      	movs	r3, #16
 80038e0:	e7b0      	b.n	8003844 <_printf_i+0xfc>
 80038e2:	6823      	ldr	r3, [r4, #0]
 80038e4:	f043 0320 	orr.w	r3, r3, #32
 80038e8:	6023      	str	r3, [r4, #0]
 80038ea:	2378      	movs	r3, #120	; 0x78
 80038ec:	4828      	ldr	r0, [pc, #160]	; (8003990 <_printf_i+0x248>)
 80038ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80038f2:	e7e3      	b.n	80038bc <_printf_i+0x174>
 80038f4:	065e      	lsls	r6, r3, #25
 80038f6:	bf48      	it	mi
 80038f8:	b2ad      	uxthmi	r5, r5
 80038fa:	e7e6      	b.n	80038ca <_printf_i+0x182>
 80038fc:	4616      	mov	r6, r2
 80038fe:	e7bb      	b.n	8003878 <_printf_i+0x130>
 8003900:	680b      	ldr	r3, [r1, #0]
 8003902:	6826      	ldr	r6, [r4, #0]
 8003904:	6960      	ldr	r0, [r4, #20]
 8003906:	1d1d      	adds	r5, r3, #4
 8003908:	600d      	str	r5, [r1, #0]
 800390a:	0635      	lsls	r5, r6, #24
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	d501      	bpl.n	8003914 <_printf_i+0x1cc>
 8003910:	6018      	str	r0, [r3, #0]
 8003912:	e002      	b.n	800391a <_printf_i+0x1d2>
 8003914:	0671      	lsls	r1, r6, #25
 8003916:	d5fb      	bpl.n	8003910 <_printf_i+0x1c8>
 8003918:	8018      	strh	r0, [r3, #0]
 800391a:	2300      	movs	r3, #0
 800391c:	6123      	str	r3, [r4, #16]
 800391e:	4616      	mov	r6, r2
 8003920:	e7ba      	b.n	8003898 <_printf_i+0x150>
 8003922:	680b      	ldr	r3, [r1, #0]
 8003924:	1d1a      	adds	r2, r3, #4
 8003926:	600a      	str	r2, [r1, #0]
 8003928:	681e      	ldr	r6, [r3, #0]
 800392a:	6862      	ldr	r2, [r4, #4]
 800392c:	2100      	movs	r1, #0
 800392e:	4630      	mov	r0, r6
 8003930:	f7fc fc76 	bl	8000220 <memchr>
 8003934:	b108      	cbz	r0, 800393a <_printf_i+0x1f2>
 8003936:	1b80      	subs	r0, r0, r6
 8003938:	6060      	str	r0, [r4, #4]
 800393a:	6863      	ldr	r3, [r4, #4]
 800393c:	6123      	str	r3, [r4, #16]
 800393e:	2300      	movs	r3, #0
 8003940:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003944:	e7a8      	b.n	8003898 <_printf_i+0x150>
 8003946:	6923      	ldr	r3, [r4, #16]
 8003948:	4632      	mov	r2, r6
 800394a:	4649      	mov	r1, r9
 800394c:	4640      	mov	r0, r8
 800394e:	47d0      	blx	sl
 8003950:	3001      	adds	r0, #1
 8003952:	d0ab      	beq.n	80038ac <_printf_i+0x164>
 8003954:	6823      	ldr	r3, [r4, #0]
 8003956:	079b      	lsls	r3, r3, #30
 8003958:	d413      	bmi.n	8003982 <_printf_i+0x23a>
 800395a:	68e0      	ldr	r0, [r4, #12]
 800395c:	9b03      	ldr	r3, [sp, #12]
 800395e:	4298      	cmp	r0, r3
 8003960:	bfb8      	it	lt
 8003962:	4618      	movlt	r0, r3
 8003964:	e7a4      	b.n	80038b0 <_printf_i+0x168>
 8003966:	2301      	movs	r3, #1
 8003968:	4632      	mov	r2, r6
 800396a:	4649      	mov	r1, r9
 800396c:	4640      	mov	r0, r8
 800396e:	47d0      	blx	sl
 8003970:	3001      	adds	r0, #1
 8003972:	d09b      	beq.n	80038ac <_printf_i+0x164>
 8003974:	3501      	adds	r5, #1
 8003976:	68e3      	ldr	r3, [r4, #12]
 8003978:	9903      	ldr	r1, [sp, #12]
 800397a:	1a5b      	subs	r3, r3, r1
 800397c:	42ab      	cmp	r3, r5
 800397e:	dcf2      	bgt.n	8003966 <_printf_i+0x21e>
 8003980:	e7eb      	b.n	800395a <_printf_i+0x212>
 8003982:	2500      	movs	r5, #0
 8003984:	f104 0619 	add.w	r6, r4, #25
 8003988:	e7f5      	b.n	8003976 <_printf_i+0x22e>
 800398a:	bf00      	nop
 800398c:	08003cc5 	.word	0x08003cc5
 8003990:	08003cd6 	.word	0x08003cd6

08003994 <memcpy>:
 8003994:	440a      	add	r2, r1
 8003996:	4291      	cmp	r1, r2
 8003998:	f100 33ff 	add.w	r3, r0, #4294967295
 800399c:	d100      	bne.n	80039a0 <memcpy+0xc>
 800399e:	4770      	bx	lr
 80039a0:	b510      	push	{r4, lr}
 80039a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039aa:	4291      	cmp	r1, r2
 80039ac:	d1f9      	bne.n	80039a2 <memcpy+0xe>
 80039ae:	bd10      	pop	{r4, pc}

080039b0 <memmove>:
 80039b0:	4288      	cmp	r0, r1
 80039b2:	b510      	push	{r4, lr}
 80039b4:	eb01 0402 	add.w	r4, r1, r2
 80039b8:	d902      	bls.n	80039c0 <memmove+0x10>
 80039ba:	4284      	cmp	r4, r0
 80039bc:	4623      	mov	r3, r4
 80039be:	d807      	bhi.n	80039d0 <memmove+0x20>
 80039c0:	1e43      	subs	r3, r0, #1
 80039c2:	42a1      	cmp	r1, r4
 80039c4:	d008      	beq.n	80039d8 <memmove+0x28>
 80039c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80039ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80039ce:	e7f8      	b.n	80039c2 <memmove+0x12>
 80039d0:	4402      	add	r2, r0
 80039d2:	4601      	mov	r1, r0
 80039d4:	428a      	cmp	r2, r1
 80039d6:	d100      	bne.n	80039da <memmove+0x2a>
 80039d8:	bd10      	pop	{r4, pc}
 80039da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80039de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80039e2:	e7f7      	b.n	80039d4 <memmove+0x24>

080039e4 <_free_r>:
 80039e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80039e6:	2900      	cmp	r1, #0
 80039e8:	d048      	beq.n	8003a7c <_free_r+0x98>
 80039ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039ee:	9001      	str	r0, [sp, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f1a1 0404 	sub.w	r4, r1, #4
 80039f6:	bfb8      	it	lt
 80039f8:	18e4      	addlt	r4, r4, r3
 80039fa:	f000 f8d3 	bl	8003ba4 <__malloc_lock>
 80039fe:	4a20      	ldr	r2, [pc, #128]	; (8003a80 <_free_r+0x9c>)
 8003a00:	9801      	ldr	r0, [sp, #4]
 8003a02:	6813      	ldr	r3, [r2, #0]
 8003a04:	4615      	mov	r5, r2
 8003a06:	b933      	cbnz	r3, 8003a16 <_free_r+0x32>
 8003a08:	6063      	str	r3, [r4, #4]
 8003a0a:	6014      	str	r4, [r2, #0]
 8003a0c:	b003      	add	sp, #12
 8003a0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a12:	f000 b8cd 	b.w	8003bb0 <__malloc_unlock>
 8003a16:	42a3      	cmp	r3, r4
 8003a18:	d90b      	bls.n	8003a32 <_free_r+0x4e>
 8003a1a:	6821      	ldr	r1, [r4, #0]
 8003a1c:	1862      	adds	r2, r4, r1
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	bf04      	itt	eq
 8003a22:	681a      	ldreq	r2, [r3, #0]
 8003a24:	685b      	ldreq	r3, [r3, #4]
 8003a26:	6063      	str	r3, [r4, #4]
 8003a28:	bf04      	itt	eq
 8003a2a:	1852      	addeq	r2, r2, r1
 8003a2c:	6022      	streq	r2, [r4, #0]
 8003a2e:	602c      	str	r4, [r5, #0]
 8003a30:	e7ec      	b.n	8003a0c <_free_r+0x28>
 8003a32:	461a      	mov	r2, r3
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	b10b      	cbz	r3, 8003a3c <_free_r+0x58>
 8003a38:	42a3      	cmp	r3, r4
 8003a3a:	d9fa      	bls.n	8003a32 <_free_r+0x4e>
 8003a3c:	6811      	ldr	r1, [r2, #0]
 8003a3e:	1855      	adds	r5, r2, r1
 8003a40:	42a5      	cmp	r5, r4
 8003a42:	d10b      	bne.n	8003a5c <_free_r+0x78>
 8003a44:	6824      	ldr	r4, [r4, #0]
 8003a46:	4421      	add	r1, r4
 8003a48:	1854      	adds	r4, r2, r1
 8003a4a:	42a3      	cmp	r3, r4
 8003a4c:	6011      	str	r1, [r2, #0]
 8003a4e:	d1dd      	bne.n	8003a0c <_free_r+0x28>
 8003a50:	681c      	ldr	r4, [r3, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	6053      	str	r3, [r2, #4]
 8003a56:	4421      	add	r1, r4
 8003a58:	6011      	str	r1, [r2, #0]
 8003a5a:	e7d7      	b.n	8003a0c <_free_r+0x28>
 8003a5c:	d902      	bls.n	8003a64 <_free_r+0x80>
 8003a5e:	230c      	movs	r3, #12
 8003a60:	6003      	str	r3, [r0, #0]
 8003a62:	e7d3      	b.n	8003a0c <_free_r+0x28>
 8003a64:	6825      	ldr	r5, [r4, #0]
 8003a66:	1961      	adds	r1, r4, r5
 8003a68:	428b      	cmp	r3, r1
 8003a6a:	bf04      	itt	eq
 8003a6c:	6819      	ldreq	r1, [r3, #0]
 8003a6e:	685b      	ldreq	r3, [r3, #4]
 8003a70:	6063      	str	r3, [r4, #4]
 8003a72:	bf04      	itt	eq
 8003a74:	1949      	addeq	r1, r1, r5
 8003a76:	6021      	streq	r1, [r4, #0]
 8003a78:	6054      	str	r4, [r2, #4]
 8003a7a:	e7c7      	b.n	8003a0c <_free_r+0x28>
 8003a7c:	b003      	add	sp, #12
 8003a7e:	bd30      	pop	{r4, r5, pc}
 8003a80:	20000090 	.word	0x20000090

08003a84 <_malloc_r>:
 8003a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a86:	1ccd      	adds	r5, r1, #3
 8003a88:	f025 0503 	bic.w	r5, r5, #3
 8003a8c:	3508      	adds	r5, #8
 8003a8e:	2d0c      	cmp	r5, #12
 8003a90:	bf38      	it	cc
 8003a92:	250c      	movcc	r5, #12
 8003a94:	2d00      	cmp	r5, #0
 8003a96:	4606      	mov	r6, r0
 8003a98:	db01      	blt.n	8003a9e <_malloc_r+0x1a>
 8003a9a:	42a9      	cmp	r1, r5
 8003a9c:	d903      	bls.n	8003aa6 <_malloc_r+0x22>
 8003a9e:	230c      	movs	r3, #12
 8003aa0:	6033      	str	r3, [r6, #0]
 8003aa2:	2000      	movs	r0, #0
 8003aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003aa6:	f000 f87d 	bl	8003ba4 <__malloc_lock>
 8003aaa:	4921      	ldr	r1, [pc, #132]	; (8003b30 <_malloc_r+0xac>)
 8003aac:	680a      	ldr	r2, [r1, #0]
 8003aae:	4614      	mov	r4, r2
 8003ab0:	b99c      	cbnz	r4, 8003ada <_malloc_r+0x56>
 8003ab2:	4f20      	ldr	r7, [pc, #128]	; (8003b34 <_malloc_r+0xb0>)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	b923      	cbnz	r3, 8003ac2 <_malloc_r+0x3e>
 8003ab8:	4621      	mov	r1, r4
 8003aba:	4630      	mov	r0, r6
 8003abc:	f000 f862 	bl	8003b84 <_sbrk_r>
 8003ac0:	6038      	str	r0, [r7, #0]
 8003ac2:	4629      	mov	r1, r5
 8003ac4:	4630      	mov	r0, r6
 8003ac6:	f000 f85d 	bl	8003b84 <_sbrk_r>
 8003aca:	1c43      	adds	r3, r0, #1
 8003acc:	d123      	bne.n	8003b16 <_malloc_r+0x92>
 8003ace:	230c      	movs	r3, #12
 8003ad0:	6033      	str	r3, [r6, #0]
 8003ad2:	4630      	mov	r0, r6
 8003ad4:	f000 f86c 	bl	8003bb0 <__malloc_unlock>
 8003ad8:	e7e3      	b.n	8003aa2 <_malloc_r+0x1e>
 8003ada:	6823      	ldr	r3, [r4, #0]
 8003adc:	1b5b      	subs	r3, r3, r5
 8003ade:	d417      	bmi.n	8003b10 <_malloc_r+0x8c>
 8003ae0:	2b0b      	cmp	r3, #11
 8003ae2:	d903      	bls.n	8003aec <_malloc_r+0x68>
 8003ae4:	6023      	str	r3, [r4, #0]
 8003ae6:	441c      	add	r4, r3
 8003ae8:	6025      	str	r5, [r4, #0]
 8003aea:	e004      	b.n	8003af6 <_malloc_r+0x72>
 8003aec:	6863      	ldr	r3, [r4, #4]
 8003aee:	42a2      	cmp	r2, r4
 8003af0:	bf0c      	ite	eq
 8003af2:	600b      	streq	r3, [r1, #0]
 8003af4:	6053      	strne	r3, [r2, #4]
 8003af6:	4630      	mov	r0, r6
 8003af8:	f000 f85a 	bl	8003bb0 <__malloc_unlock>
 8003afc:	f104 000b 	add.w	r0, r4, #11
 8003b00:	1d23      	adds	r3, r4, #4
 8003b02:	f020 0007 	bic.w	r0, r0, #7
 8003b06:	1ac2      	subs	r2, r0, r3
 8003b08:	d0cc      	beq.n	8003aa4 <_malloc_r+0x20>
 8003b0a:	1a1b      	subs	r3, r3, r0
 8003b0c:	50a3      	str	r3, [r4, r2]
 8003b0e:	e7c9      	b.n	8003aa4 <_malloc_r+0x20>
 8003b10:	4622      	mov	r2, r4
 8003b12:	6864      	ldr	r4, [r4, #4]
 8003b14:	e7cc      	b.n	8003ab0 <_malloc_r+0x2c>
 8003b16:	1cc4      	adds	r4, r0, #3
 8003b18:	f024 0403 	bic.w	r4, r4, #3
 8003b1c:	42a0      	cmp	r0, r4
 8003b1e:	d0e3      	beq.n	8003ae8 <_malloc_r+0x64>
 8003b20:	1a21      	subs	r1, r4, r0
 8003b22:	4630      	mov	r0, r6
 8003b24:	f000 f82e 	bl	8003b84 <_sbrk_r>
 8003b28:	3001      	adds	r0, #1
 8003b2a:	d1dd      	bne.n	8003ae8 <_malloc_r+0x64>
 8003b2c:	e7cf      	b.n	8003ace <_malloc_r+0x4a>
 8003b2e:	bf00      	nop
 8003b30:	20000090 	.word	0x20000090
 8003b34:	20000094 	.word	0x20000094

08003b38 <_realloc_r>:
 8003b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b3a:	4607      	mov	r7, r0
 8003b3c:	4614      	mov	r4, r2
 8003b3e:	460e      	mov	r6, r1
 8003b40:	b921      	cbnz	r1, 8003b4c <_realloc_r+0x14>
 8003b42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003b46:	4611      	mov	r1, r2
 8003b48:	f7ff bf9c 	b.w	8003a84 <_malloc_r>
 8003b4c:	b922      	cbnz	r2, 8003b58 <_realloc_r+0x20>
 8003b4e:	f7ff ff49 	bl	80039e4 <_free_r>
 8003b52:	4625      	mov	r5, r4
 8003b54:	4628      	mov	r0, r5
 8003b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b58:	f000 f830 	bl	8003bbc <_malloc_usable_size_r>
 8003b5c:	42a0      	cmp	r0, r4
 8003b5e:	d20f      	bcs.n	8003b80 <_realloc_r+0x48>
 8003b60:	4621      	mov	r1, r4
 8003b62:	4638      	mov	r0, r7
 8003b64:	f7ff ff8e 	bl	8003a84 <_malloc_r>
 8003b68:	4605      	mov	r5, r0
 8003b6a:	2800      	cmp	r0, #0
 8003b6c:	d0f2      	beq.n	8003b54 <_realloc_r+0x1c>
 8003b6e:	4631      	mov	r1, r6
 8003b70:	4622      	mov	r2, r4
 8003b72:	f7ff ff0f 	bl	8003994 <memcpy>
 8003b76:	4631      	mov	r1, r6
 8003b78:	4638      	mov	r0, r7
 8003b7a:	f7ff ff33 	bl	80039e4 <_free_r>
 8003b7e:	e7e9      	b.n	8003b54 <_realloc_r+0x1c>
 8003b80:	4635      	mov	r5, r6
 8003b82:	e7e7      	b.n	8003b54 <_realloc_r+0x1c>

08003b84 <_sbrk_r>:
 8003b84:	b538      	push	{r3, r4, r5, lr}
 8003b86:	4d06      	ldr	r5, [pc, #24]	; (8003ba0 <_sbrk_r+0x1c>)
 8003b88:	2300      	movs	r3, #0
 8003b8a:	4604      	mov	r4, r0
 8003b8c:	4608      	mov	r0, r1
 8003b8e:	602b      	str	r3, [r5, #0]
 8003b90:	f7fd f922 	bl	8000dd8 <_sbrk>
 8003b94:	1c43      	adds	r3, r0, #1
 8003b96:	d102      	bne.n	8003b9e <_sbrk_r+0x1a>
 8003b98:	682b      	ldr	r3, [r5, #0]
 8003b9a:	b103      	cbz	r3, 8003b9e <_sbrk_r+0x1a>
 8003b9c:	6023      	str	r3, [r4, #0]
 8003b9e:	bd38      	pop	{r3, r4, r5, pc}
 8003ba0:	200001a8 	.word	0x200001a8

08003ba4 <__malloc_lock>:
 8003ba4:	4801      	ldr	r0, [pc, #4]	; (8003bac <__malloc_lock+0x8>)
 8003ba6:	f000 b811 	b.w	8003bcc <__retarget_lock_acquire_recursive>
 8003baa:	bf00      	nop
 8003bac:	200001b0 	.word	0x200001b0

08003bb0 <__malloc_unlock>:
 8003bb0:	4801      	ldr	r0, [pc, #4]	; (8003bb8 <__malloc_unlock+0x8>)
 8003bb2:	f000 b80c 	b.w	8003bce <__retarget_lock_release_recursive>
 8003bb6:	bf00      	nop
 8003bb8:	200001b0 	.word	0x200001b0

08003bbc <_malloc_usable_size_r>:
 8003bbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bc0:	1f18      	subs	r0, r3, #4
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	bfbc      	itt	lt
 8003bc6:	580b      	ldrlt	r3, [r1, r0]
 8003bc8:	18c0      	addlt	r0, r0, r3
 8003bca:	4770      	bx	lr

08003bcc <__retarget_lock_acquire_recursive>:
 8003bcc:	4770      	bx	lr

08003bce <__retarget_lock_release_recursive>:
 8003bce:	4770      	bx	lr

08003bd0 <_init>:
 8003bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bd2:	bf00      	nop
 8003bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bd6:	bc08      	pop	{r3}
 8003bd8:	469e      	mov	lr, r3
 8003bda:	4770      	bx	lr

08003bdc <_fini>:
 8003bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bde:	bf00      	nop
 8003be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003be2:	bc08      	pop	{r3}
 8003be4:	469e      	mov	lr, r3
 8003be6:	4770      	bx	lr
